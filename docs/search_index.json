[["index.html", "Introduction to Structural Equation Modeling Course Information", " Introduction to Structural Equation Modeling Kyle M. Lang Last updated: 2025-09-08 Course Information In order to test a theory, we must express the theory as a statistical model and then test this model on quantitative (numeric) data. In this course we will use datasets from different disciplines within the social sciences (educational sciences, psychology, and sociology) to explain and illustrate theories and practices that are used in all social science disciplines to statistically model social science theories. This course uses existing tutorial datasets to practice the process of translating verbal theories into testable statistical models. If you are interested in the methods of acquiring high quality data to test your own theory, we recommend following the course Conducting a Survey which is taught from November to January. Most information about the course is available in this GitBook. Course-related communication will be through https://uu.brightspace.com (Log in with your student ID and password). "],["acknowledgement.html", "Acknowledgement", " Acknowledgement This course was originally developed by dr. Caspar van Lissa. I (dr. Kyle M. Lang) have modified Caspar’s original materials and take full responsibility for any errors or inaccuracies introduced through these modifications. Credit for any particularly effective piece of pedagogy should probably go to Caspar. You can view the original version of this course here on Caspar’s GitHub page. "],["instructors.html", "Instructors", " Instructors Coordinator: dr. Kyle M. Lang Lectures: dr. Kyle M. Lang Practicals: dr. Beth Grandfield dr. Noémi Schuurman "],["course-overview.html", "Course overview", " Course overview This course comprises three parts: Path analysis: You will learn how to estimate complex path models of observed variables (e.g., linked linear regressions) as structural equation models. Factor analysis: You will learn different ways of defining and estimating latent (unobserved) constructs. Full structural equation modeling: You will combine the first two topics to estimate path models describing the associations among latent constructs. Your mastery of these themes will be evaluated with a two data analysis assignments. The first assignment covers path analysis. You will complete this assignment in a group of three students. This assignment will be graded on a pass/fail basis. The second assignment covers latent variable modeling. This is an individual assignment. Your course grade will be based on your second assignment grade. "],["schedule.html", "Schedule", " Schedule Course Week Calendar Week Lecture/Practical Topic Workgroup Activity Assignment Deadline 0 36 Pre-course preparation 1 37 Introduction to R 2 38 Statistical modeling, Path analysis 3 39 Mediation, Moderation 4 40 Confirmatory factor analysis (CFA) I A1 Peer-Review A1: 2025-10-01 @ 23:59 5 41 CFA II 6 42 No class meetings 7 43 Structural equation modeling (SEM) 8 44 Multiple group models A3 Peer-Review 9 45 No class meetings A3: 2025-11-02 @ 23:59 NOTE: The schedule (including topics covered and assignment deadlines) is subject to change at the instructors’ discretion. "],["learning-goals.html", "Learning goals", " Learning goals In this course you will learn how to translate a social scientific theory into a statistical model, how to analyze your data with these models, and how to interpret and report your results following APA standards. After completing the course, you will be able to: Translate a verbal theory into a conceptual model, and translate a conceptual model into a statistical model. Independently analyze data using the free, open-source statistical software R. Use a path model to represent the hypothesized causal relations among several variables, including relationships such as mediation and moderation. Apply a latent variable model to a real-life problem wherein the observed variables are only indirect indicators of an unobserved construct. Explain to a fellow student how structural equation modeling combines latent variable models with path models and the benefits of doing so. Reflect critically on the decisions involved in defining and estimating structural equation models. Background knowledge We assume you have basic knowledge about multivariate statistics before entering this course. You do not need any prior experience working with R. If you wish to refresh your knowledge, Andy Field’s Discovering Statistics using R is quite a popular and well-respected introductory stats book. If you cannot access the Field book, many other introductory statistics textbooks cover these topics equally well. So, use whatever you have lying around from past statistics courses. You could also try one of the following open-access options: Applied Statistics with R Introduction to Modern Statistics Introduction to Statistical Learning "],["resources.html", "Resources", " Resources Literature You do not need a separate book for this course! Most of the information is contained within this GitBook and the course readings (which you will be able to access via links in this GitBook). All literature is freely available online, as long as you are logging in from within the UU-domain (i.e., from the UU campus or through an appropriate VPN). All readings are linked in this GitBook via either direct download links or DOIs. If you run into any trouble accessing a given article, searching for the title using Google Scholar or the University Library will probably due the trick. Reading questions Along with every article, we will provide reading questions. You will not be graded on the reading questions, but it is important to prepare the reading questions before every lecture. The reading questions serve several important purposes: Provide relevant background knowledge for the lecture Help you recognize and understand the key terms and concepts Make you aware of important publications that shaped the field Help you extract the relevant insights from the literature Software You will do all of your statistical analyses with the statistical programming language/environment R and the add-on package lavaan. If you want to expand your learning, you can follow this optional lavaan tutorial. "],["logistics.html", "Logistics", " Logistics Weekly preparation Before every class meeting (both lectures and practicals) you need to do the assigned homework (delineated in the GitBook chapter for that week). This course follows a flipped classroom procedure, so you must complete the weekly homework to meaningfully participate in, and benefit from, the class meetings. Evaluation Your grade for the course is based on a “portfolio” composed of the two data analysis projects: Path modeling Deadline: Wednesday 2025-10-01 at 23:59 Group assignment Pass/Fail Structural equation modeling Deadline: Sunday 2025-11-02 at 23:59 Individual assignment Comprises your entire numeric course grade The specifics of the assignments will be explicated in the Assignments chapter of this GitBook Attendance Attendance is not mandatory, but we strongly encourage you to attend all lectures and practicals. In our experience, students who actively participate tend to pass the course, whereas those who do not participate tend to drop out or fail. The lectures and practicals build on each other, so, in the unfortunate event that you have to miss a class meeting, please make sure you have caught up with the material before the next session. "],["ai_policy.html", "Using GenAI", " Using GenAI Utrecht University (UU) has a set of general policies and guidelines regarding GenAI use in UU courses. Yet, the specifics are largely left for the instructors to decide on a course-by-course basis. So, in this section, we describe how you may use GenAI in this course. AI index UU has adopted the AI Index which defines five different “scenarios” for GenAI usage in UU courses. In the Faculty of Social and Behavioral Sciences (FSBS), we’re piloting a revised version of the AI Index that delineates the following five scenarios. Scenario A: No AI The assessment is completed entirely without AI assistant in a controlled environment, ensuring that students rely solely on their existing knowledge, understanding, and skills. You must not use AI at any point during the assessment. You must demonstrate your own core skills and knowledge. Scenario B: AI planning AI may be used for pre-task at activities such as brainstorming, outlining, and initial research. This scenario focuses on effective use of AI for planning, synthesis, and ideation, but assessment should emphasize the ability to develop and refine these ideas independently. You may use AI for planning, idea development, and research. Your final submission should show how you have developed and refined these ideas. Scenario C: AI collaboration AI may be used to help complete the task including idea generation, drafting, feedback, and refinement. Students should critically evaluate and modify their AI suggested outputs, demonstrating their understanding. You may use AI to assist with specific tasks such as drafting text, refining, and evaluating your work. You must critically evaluate and modify any AI generated content you use. Scenario D: Full AI AI may be used to complete any elements of the task, with students directing AI to achieve the assessment goals. In this scenario assessment may also require engagement with AI to achieve goals and solve problems. You may use AI throughout your work either as you wish, or as specifically directed in your assessment. Focus on directing AI to achieve your goals while demonstrating your critical thinking. Scenario E: AI exploration AI is used creatively to enhance problem solving generate novel insights, what developed innovative solutions to solve problems. Students and educators Co design assessments to explore unique AI applications within the field of study. You should use AI creatively to solve the task, potentially co- designing new approaches with your instructor. Acceptable usage in this course This course falls into Scenario C of the FSBS AI Index. Why not A or B? We don’t see any point in being overly restrictive, and we think GenAI can be truly useful for rigorous data analysis. We want you to learn path analysis, factor analysis, and structural equation modeling, but we don’t really care about the exact tools you use to do these analyses. Furthermore, data analysis and technical writing involve a lot of tedious grunt work. Your ability to complete these tasks tells us nothing about your mastery of the course content. So, we think it’s great if GenAI obviates some of the menial drudgery and allows you to focus on the important work of developing, estimating, and interpreting statistical models. Consequently, Scenarios A and B are limiting and counterproductive. Why not D or E? You need to learn the underlying why of statistical modeling, not just the superficial how. In the era of modern statistical software packages, it’s never been terribly difficult to estimate a statistical model, and that’s even more true now that GenAI tools can help specify the function calls. The difficult part of statistical modeling has always been the critical reasoning needed to design a suitable analysis, evaluate the results, and synthesize the findings. You can’t develop these critical reasoning skills if you offload too much work to GenAI. So, Scenario D works against our course goals. Finally, this isn’t a “vibe coding” course, we won’t teach you how to use AI tools, and we don’t care how good you are at using any given AI tool. So, Scenario E is clearly inappropriate Including AI-generated content in your work You are free to use GenAI to brainstorm ideas, draft text, prototype code, etc. However, you are always responsible for your own work, and you are never allowed to submit work developed entirely by GenAI as your own. In nearly all cases, you should adapt the robots’ work to suit your project. For example, Edit Text… Into your own voice For continuity and contextual fit To correct factual errors Edit Code… To suit your analysis/project To use appropriate style For efficiency Although you shouldn’t need to synthesize any data for this course, be aware of the following restrictions: You may use AI tools to assist you in generating code that results in reproducible data sets. You may not use AI tools to directly generate data sets. Referencing and academic integrity You must document your use of GenAI tools and cite direct quotations of AI-generated content as dictated by the relevant UU policy. In your two data analysis assignments, you will also need to provide an AI disclosure statement. Generative AI may be shiny new tech, but that just means AI is like the newest, shiniest gizmo in a toolbox full of time-tested options, not some paradigm shift in carpentry that deprecates the hammer. The normal ethics of scientific communication still apply: Transparently describe your work Honestly attribute credit/blame Of course, the natural corollary of the above is that all the standard penalties for bad behavior also apply. Obfuscating your use of AI tools or attempting to claim AI-generated content as your own work is a form of academic fraud that is more-or-less equivalent to plagiarism. We will treat any such attempted subterfuge as academic dishonesty. Finally, don’t trust The Robots too much! You are ultimately responsible for the work you submit. So, you will have to own any “mistakes” that wily AI models induce in your work. "],["assignments.html", "Assignments", " Assignments This chapter contains the details and binding information about the two data analysis assignments that comprise the portfolio upon which your course grade is based. Below, you can find a brief idea of what each assignment will cover. For each assignment, you will use R to analyze some real-world data, and you will write up your results in a concise report (not a full research paper). Guidelines for these analyses/reports are delineated in the following two sections. You will submit your reports via Brightspace. You will complete Assignment 1 in the Assignment Group that you join on Brightspace. You will complete the second assignment individually. The first assignment is graded as pass/fail. You must pass this first assignment to pass the course. Your grade on the second assignment constitutes your numeric course grade. "],["a1.html", "Assignment 1: Path Analysis", " Assignment 1: Path Analysis For the first assignment, you will work in groups to apply a path model that describes how several (observed) variables could be causally related. Required Components The obligatory aspects of the first assignment are described below. Choose a suitable dataset, and describe the data. You can use any of the 8 datasets linked below. Provide some form of citation for the data source Provide descriptive statistics for important demographics (e.g., sex, age, SES) and the substantive variables that you will use to estimate your model. State the research question; define and explicate the theoretical path model. This model must include, at least, three variables. Dependent variable (DV) Theoretically interesting independent variable/predictor (IV) Covariate/control variable Your model can also include more than one of any type of variable. We encourage using more than one IV and covariate. Include a path diagram that represents your theoretical model. Explain the conceptual fit between your theory and your model. I.e., how does your model represent your theory? Translate your theoretical path model into lavaan syntax, and estimate the model. Submit the (clean) R script along with your report. Submit this R script as a separate file, not part of your report. Include the lavaan syntax used to estimate your path models in your report. Place these syntax snippets in an appendix. Report the results of you analysis. Evaluate the model assumptions. Provide relevant output in a suitable format. Include measures of explained variance for the dependent variables. Discuss your findings. Use your results to answer the research question. Consider the strengths and limitations of your analysis. Discuss any important decisions that could have influence your results. Evaluation See the Grading section below for more information on how Assignment 1 will be evaluated. You can access an evaluation matrix for Assignment 1 here. This matrix gives an indication of what level of work constitutes insufficient, sufficient, and excellent responses to the five components described above. Submission Assignment 1 is due at 23:59 on Wednesday 1 October 2025. Submit your report via the Assignments Page on Brightspace. "],["a2.html", "Assignment 2: Structural Equation Modeling", " Assignment 2: Structural Equation Modeling In the second assignment, you will work individually to apply a structural equation model (SEM) that describes how several (latent) variables could be causally related. Before estimating your SEM, you will evaluate the validity of your latent variables by using confirmatory factor analysis (CFA) to test your hypothesized measurement model. You will include both your CFA and SEM results in your write-up. The inferences that you draw from an SEM are only valid if the underlying measurement model holds. So, the first step in reporting any SEM (at least any SEM that includes estimated latent constructs) is demonstrating the validity of the measurement model by reporting your CFA results. Required Components The obligatory aspects of the second assignment are described below. Choose a suitable dataset, and describe the data. Unless you have a good reason to switch, you should work with the same data that you analyzed in Assignment 1. If you need to switch, you can use any of the 8 datasets linked below. State the research question; define and explicate the theoretical SEM. The structural component of this model must include, at least, three variables. The structural model must include, at least, two latent variables. At least one independent variable in your model must be latent. You do not need to explicate a separate theory/research question/hypothsis for your measurement model. Translate your hypothesized measurement model into lavaan syntax, and estimate the CFA model. Submit the (clean) R script along with your report. Submit this R script as a separate file, not part of your report. Include the lavaan syntax used to estimate your CFA models in your report. Place these syntax snippets in an appendix. Report the results of your CFA. Provide relevant output in a suitable format. Include suitable parameter estimates. Include measures of explained variance for the observed indicators. Include measures of model fit. Evaluate the model assumptions. Translate your theoretical SEM into lavaan syntax, and estimate the model. Submit the (clean) R script along with your report. Submit this R script as a separate file, not part of your report. Include the lavaan syntax used to estimate your SEM model in your report. Place these syntax snippets in an appendix. Report the results of your SEM. Provide relevant output in a suitable format. Include suitable parameter estimates. Include measures of model fit. Include measures of explained variance for the latent dependent variables. Discuss your findings. Use your results to answer the research question. Consider the strengths and limitations of your analysis. Discuss any important decisions that could have influence your results. Evaluation See the Grading section below for more information on how Assignment 2 will be evaluated. You can access an evaluation matrix for Assignment 2 here. This matrix gives an indication of what level of work constitutes insufficient, sufficient, and excellent responses to the seven components described above. Submission Assignment 2 is due at 23:59 on Sunday 2 November 2025. Submit your report via the Assignments Page on Brightspace. "],["elaboration-tips.html", "Elaboration &amp; Tips", " Elaboration &amp; Tips Progression The two assignments are meant to build upon one another. So, you should plan on analyzing the same dataset for both assignments and choose a theoretical model that will satisfy the requirements of both assignments. To facilitate this progression, consider the following points. For A2, your theoretical model must include two or more latent constructs. At least one of the latent constructs must act as in IV in your model. When specifying your model for A1, ensure that you use at least two scale scores constructed from three or more items each. Make sure to include at least one of these scale scores as an IV. In A2, you can use latent variables to represent these scales scores. We will not cover methods for estimating latent variables from categorical items. When specifying the latent constructs/scale scores in your model, do not use nominal items and try to avoid ordinal items with fewer than five levels. We will not cover methods for latent variable interactions. When specifying your theoretical model in A1, do not include any interactions involving scale scores (i.e., variables that will be latent constructs in A2). EXCEPTION: You may specify an interaction between a scale score/latent construct and a nominal grouping variable (e.g., sex, nationality, ethnicity). You will learn how to test this type of hypothesis via multiple-group SEM in Week 8. Recycling Prior Work Since A2 builds on A1, you’ll inevitably find yourself in the position of needing to document exactly the same things across assignments. In such circumstances, you’ll undoubtedly be wondering if you can reuse some of your previous writing. Yes. You’re free to reuse parts of your reports across all three assignments. There are some minor caveats to this statement, however. When reusing prior work, make sure to address any feedback that you received on that work. Uncorrected mistakes in copied passages will incur especially harsh penalties in the grading process. Make sure to update any recycled passages to suit the most recent analyses. A path diagram from A1 won’t be valid for A2. A description of your theoretical model from A1 that refers to “scale scores”, won’t be valid for A2. Don’t keep irrelevant parts of past assignments. Your grade will be penalized for including extraneous information. Theoretical Model &amp; Research Question You need to provide some justification for your model and research question, but not too much. Only provide enough to justification to demonstrate that you’ve actually conceptualized and estimated a theoretically plausible statistical model (as opposed to randomly combining variables until lavaan returns a pretty picture). You have several ways to show that your model is plausible. Use common-sense arguments. Reference (a small number of) published papers. Replicate an existing model/research question. Don’t provide a rigorous literature-supported theoretical motivation. You don’t have the time to conduct a thorough literature review, and we don’t have the time to read such reviews when grading. Literature review is not one of the learning goals for this course, so you cannot get “bonus points” for an extensive literature review. You are free to test any plausible model that meets the size requirements. You can derive your own model/research question or you can replicate a published analysis. Model Specifications We will not cover methods for modeling categorical outcome variables. So, use only continuous variables as outcomes. DVs in path models and the structural parts of SEMs Observed indicators of latent factors in CFA/SEM NOTE: You may treat ordinal items with five or more levesl as continuous, for the purposes of these assignments. We will not cover methods for latent variable interactions. Don’t specify a theoretical model that requires an interaction involving a latent construct. There is one exception to the above prohibition. If the moderator is an observed grouping variable, you can estimate the model as a multiple-group model. We’ll cover these methods in Week 8. Assumptions You need to show that you’re thinking about the assumptions and their impact on your results, but you don’t need to run thorough model diagnostics. Indeed, the task of checking assumptions isn’t nearly as straight forward in path analysis, CFA, and SEM as it is in linear regression modeling. You won’t be able to directly apply the methods you have learned for regression diagnostics, for example. Since all of our models are estimated with normal-theory maximum likelihood, the fundamental assumption of all the models we’ll consider in this course boils down to the following. All random variables in my model are i.i.d. multivariate normally distributed. So, you can get by with basic data screening and checking the observed random variables in your model (i.e., all variables other than fixed predictors) for normality. Since checking for multivariate normality is a bit tricky, we’ll only ask you to evaluate univariate normality. You should do these evaluations via graphical means (e.g., Normal QQ-Plots). To summarize, we’re looking for the following. Data Consider whether the measurement level of your data matches the assumptions of your model. Check your variables for univariate outliers. If you find any outliers, either treat them in some way or explain why you are retaining them for the analysis. Check for missing data. For the purposes of the assignment, you can use complete case analysis to work around the missing data. If you’re up for more of a challenge, feel free to try multiple imputation or full information maximum likelihood. Model Evaluate the univariate normality of any random, observed variables in your model. E.g., DVs in path models, observed IVs modeled as random variables, indicators of latent factors If you fit a multiple-group model for Assignment 2, do this evaluation within groups. Use graphical tools to evaluate the normality assumption. Normal QQ-Plots Histograms Kernel Density Plots Reporting Standards What do we mean by reporting your results “in a suitable format”? Basically, put some effort into making your results readable, and don’t include a bunch of superfluous information. Part of demonstrating that you understand the analysis is showing that you know which pieces of output convey the important information. Tabulate your results; don’t directly copy the R output into your report. Don’t include everything lavaan gives you. Include only the output needed to understand your results and support your conclusions. The purpose of statistical data analysis is to provide empirical evidence for or against some theory/hypothesis/model. Therefore, the way you document your analysis and report your results must serve this basic purpose, first and foremost. Support any potentially refutable claims with appropriate statistics from your analysis or a suitable citation. Not every statement needs supporting evidence. Scientific laws Physical constants Logical (in the technical sense) implications of irrefutable antecedents Your own opinions (assuming you’re not trying to pass them off as facts) The next three subsections cover some specific considerations for reporting common classes of statistical results. Significance Tests Any claim of a significant effect must be supported by relevant statistical evidence. Match your test to your hypothesis Directional hypothesis \\(\\Rightarrow\\) one-tailed test Hypothesis of any non-zero effect \\(\\Rightarrow\\) two-tailed test For any test of an estimated parameter (e.g., mean, mean difference, regression coefficient, covariance), report the parameter estimate. When using a test statistic (e.g., \\(t\\), \\(z\\), \\(F\\), \\(\\chi^2\\)) to conduct the test, report: The estimated test statistic The degrees of freedom for the test statistic The p-value for the test statistic When \\(p \\ge 0.001\\), report the computed p-value rounded to three decimal places. Otherwise, report the p-value as \\(p &lt; 0.001\\). When using a confidence interval to conduct the test: Clearly indicate the confidence level used to define the interval For directional hypotheses/one-tailed tests, only report the relevant interval bound, and report the other bound as \\(\\pm \\infty\\). When using \\(\\chi^2\\) difference tests for significance testing, report The \\(\\Delta \\chi^2\\) statistic The \\(\\Delta \\mathit{df}\\) The p-value for the \\(\\Delta \\chi^2\\) Model Fit Judging model fit is always a subjective process. The key to success is providing multiple pieces of convergent evidence to support the claimed degree of fit. Always report the \\(\\chi^2\\), its degrees of freedom, and the associated p-value. Don’t interpret the \\(\\chi^2\\): it’s testing an uninteresting hypothsis that we don’t expect to hold. Report at least two additional, non-redundant fit indices (i.e., indices that quantify fit in different ways). If you don’t have a particular preference, I’d recommend CFI, RMSEA (and its 90% CI), and SRMR Parameter Estimates Obviously, you need to report any parameter estimates that directly represent some component of your theory (e.g., regression coefficients that quantify linear associations implied by your theory). You also need to report the significance tests for these parameters. When evaluating a measurement model, a few key parameter matrices come into play. In addition to showing that your CFA model adequately fits the data, you should report the following parameter estimates: Latent variances and covariances Factor loadings Residual variances If your CFA includes a mean structure, you should also report any estimated latent means and item intercepts. "],["data_options.html", "Data", " Data Below, you can find links to a few suitable datasets that you can use for the assignments. You must use one of the following datasets. You may not choose your own data from the wild. Coping with Covid Dataset Codebook Pre-Registration Feminist Perspectives Scale Dataset Article Hypersensitive Narcissism Scale &amp; Dirty Dozen Dataset HSNS Article DD Article Kentucky Inventory of Mindfulness Skills Dataset Article Depression Anxiety Stress Scale Dataset DASS Information Nomophobia Dataset Recycled Water Acceptance Dataset Article "],["procedures.html", "Procedures", " Procedures Formatting Your assignment submissions must follow certain formatting guidelines. Failing to correctly format your submissions can impact your grade. Report You must submit your Assignment 1 &amp; 2 reports in PDF format. Each report must include the following information: The names of all assignment authors (i.e., all group members for Assignment 1, your name for Assignment 2). The Assignment Group number (only for Assignment 1). Your reports should include appendicies containing the lavaan syntax used to estimate each model include in the respective report. Include only the lavaan syntax string and the call to the estimation function used to fit the model (e.g., cfa(), sem(), lavaan()). For example, the following snippets would be appropriate. cfaMod &lt;- &#39; f1 =~ a1 + a2 + a3 f2 =~ b1 + b2 + b3 &#39; cfaOut &lt;- cfa(cfaMod, data = dat1, std.lv = TRUE) semMod &lt;- &#39; f1 =~ a1 + a2 + a3 f2 =~ b1 + b2 + b3 f1 ~ f2 + x &#39; semOut &lt;- sem(semMod, data = dat1, std.lv = TRUE) The snippet below, however, contains additional unecessary commands related to data ingest/processing and summarizing the model. dat0 &lt;- readRDS(&quot;../data/dataset.rds&quot;) dat1 &lt;- rename(dat0, x = foo, y = bar, z = baz) pathMod &lt;- &#39;foo ~ bar + baz&#39; pathOut &lt;- sem(pathOut, data = dat1) summary(pathOut) Syntax File You must also submit an executable script containing the code used for your analyses. If you used KnitR to embed your analysis code in your report, you may submit the source code that generates your report (i.e., an RMD [R Markdown], QMD [Quarto], or RNW [LaTeX] file). Otherwise, submit a standard R script. Clean the script before submitting. Remove extraneous/redundant code and comments. Only include the code for analyses that appear in your report. Include code for data processing/clean/wrangling. Order the commands to match your final analysis. E.g., Data ingest \\(\\rightarrow\\) Data processing \\(\\rightarrow\\) Descriptive analysis \\(\\rightarrow\\) Modeling \\(\\rightarrow\\) Processing results \\(\\rightarrow\\) Post-hoc analysis In theory, I should be able to source your script (i.e., run the entire script in “batch mode”) to reproduce your results. Length You may use as many words as necessary to adequately explain yourself, but concision and parsimony are encouraged. Note that the assignments are not intended to be full-blown research papers! The focus should be on the definition of your model, how this model relates to theory (introduction), and what you have learned from your estimated model (discussion). For both assignments, you should be able to get the job done in fewer than 10 pages of text (excluding title page, figures, appendices, and references). Submission You will submit your reports through Brightspace. Each assignment has a corresponding item in the “Assignments” section of the Brightspace page through which you will submit your reports. For Assignment 1, you may only submit one report per group. Designate one group member to submit the report. The grade for this submission will apply to all group members. If something goes wrong with the submission, or you notice a mistake (before the deadline) that you want to correct, you may upload a new version of your report. We will grade the final submitted version. The submissions will be screened with TurnItIn to check for plagarism. "],["grading.html", "Grading", " Grading Group Assignments Assignment 1 is simply graded as pass/fail. To pass, you must: Make a reasonable effort to complete all required work Include all required components listed above in your A1 report Demonstrate a satisfactory ability to apply path analysis Does your work demonstrate that you understand what you’re doing? Mindlessly implementing a sequence of memorized actions is not sufficient. Does your report show that you understand what you’ve done, why you’ve done it, and the implications of your results? Can we understand your analysis and results after reading your report? Submit your assignment before the deadline Otherwise, you will fail the assignment. Individual Assignment Assignment 2 will be fully graded on the usual 10-point scale. We will follow the procedure described below to compute your A2 grade. Each report starts with a baseline grade of 7. We will evaluate the quality of your work to adjust your grade above or below this baseline. As we read through the report, we add credit (e.g., 0.1 points, 0.25 points, 0.5 points) for each “good” aspect that demonstrates above-average understanding or effort. Likewise, we deduct credit for each “bad” aspect that indicates below-average understanding or effort. So, if your report aligns with a satisfactory (but not exceptional) level of understanding and effort, your grade will be 7. Your mark will be higher, however, to the extent that you can demonstrate more-than-satisfactory levels of mastery and/or effort. Likewise, your grade will be lower if you do not meet expectations. Importantly, the added and deducted credit will be assigned independently,  so the additional points you get for good aspects can counteract any points you may lose for negative aspects. The adjustment points will be allocated according to the extent to which your submission addresses the required components listed above. The evaluation matrix gives an indication of how these points will be apportioned. Assuming your group passes the first assignment, your final course grade will simply be your Assignment 2 grade. Resits You must get a “pass” for Assignment 1 and score at least 5.5 on Assignment 2 to pass the course. If you fail either of the assignments, you will have the opportunity to resit the failed assignment(s). Procedure The resit procedure is very simple. You revise the failed assignment, and your score on the revised submission will replace your failing grade (assuming a better grade for the revision). Take note of the following points. The same submission deadline applies to both resit assignments. You are, of course, free to submit your resits early. You must resit each failed assignment. If, for example, you failed both A1 and A2, you must revise both A1 and A2 and submit both revisions before the deadline. You must complete the A1 resit in your original groups. If some group members have dropped the course, complete the A1 resit with the remaining group members. You must complete the A2 resit individually. Your revised grade for A2 cannot be higher than 6. Submit your resit assignments through Brightspace. Grading Standards Your resit score will not be a simple additive transformation of your original score. We will not grade the resits by comparing your original report to your resit and checking if you corrected “enough” issues to have produced a passing score in the context of the original report. Such an approach would be the educational testing equivalent of HARKing. So, if you score a 5 on your original submission, for example, and you correct two big issues (the absence of which would have implied a passing score in the original report), you can still fail the resit. The resits are your second chance to demonstrate mastery of the relevant concepts (i.e., path analysis, latent variable modeling). If your corrections bring the report up to a level that seems to suggest that you “know what you are doing”, you will pass. If your report still suggests fundamental misunderstandings (or is otherwise substantially deficient), you will not pass. A passing grade in this course is supposed to show that you can use lavaan to conduct a sensible path analysis, CFA, and SEM, not that you can hack some haggard instructor’s goofy evaluation scheme. I don’t want any of you to fail this course. I derive no pleasure from your suffering. Anyway, from a purely selfish perspective, failing grades make much more work for the instructors than passing grades do. That being said, I do want the degree you earn from UU to be a meaningful marker of the skills and knowledge that your study program is meant to impart. So, if you did not achieve the learning goals for this course, you should not pass the course, even though that’s an unpleasant outcome for all parties. Example Assignment You can find an example of a good submission (for an older version of Assignment 2) here. This example is not perfect (no paper ever is), and several points could be improved. That being said, this submission exemplifies what we’re looking for in your project reports. So, following the spirit of this example would earn you a high grade. "],["rules.html", "Rules", " Rules Resources For both assignments, you may use any reference materials you like, including: All course materials The course GitBook Additional books and papers The internet Collaboration You will complete the first assignment in groups. Although you will work in groups, your group may not work together with other groups. You will complete the final assignment individually. For this assignment, you may not work with anyone else. For both assignments, you are obligated to submit original work (i.e., work conducted for this course by you or your group). Submitting an assignment that violates this condition constitutes fraud. Such cases of fraud will be addressed according to the University’s standard policy. Academic integrity Hopefully, you also feel a moral obligation to obey the rules. For this course, we have implemented an examination that allows you to showcase what you have learned in a more realistic way than a written exam would allow. This assessment format spares you the stress of long exams (the two exams for this course used to be 4 hours each) and the attendant studying/cramming. The assignments will also help you assess your ability to independently analyse data, which is important to know for your future courses and/or career. However, this format also assumes that you complete the assignments in good faith. So, I simply ask that you hold up your end of the bargain, and submit your original work to show us what you’ve learned. GenAI disclosure statement Naturally, all of the course policies on GenAI also apply to the data analysis assignments. In addition to these general policies, you must include a GenAI disclosure statement in each of your assignments. You are free to use AI tools like OpenAI’s ChatGPT or GitHub CoPilot, but you must cite the tools you used in the same way that you would cite any other software. As with citing any other source, properly citing AI tools both attributes the appropriate credit to the tool’s developers and helps you clearly and accurately describe your own work. In addition to providing a valid citation, you must also explain how you used the AI tool. Specifically, did you use AI to: Create new content (e.g., use ChatGPT to draft some parts of the text) Modify content that you created (e.g., use CoPilot to debug your R code) Provide this information in a separate GenAI Disclosure Statement section at the end of your report. Strict stuff By submitting your assignments (both group and individual), you confirm the following: You have completed the assignment yourself (or with your group) You are submitting work that you have written yourself (or with your group) You are using your own UU credentials to submit the assignment You have not had outside help that violates the conditions delineated above while completing the assignment All assignments will be submitted via Ouriginal in Blackboard and, thereby, checked for plagiarism. If fraud or plagiarism is detected or suspected, we will inform the Board of Examiners in the usual manner. In the event of demonstrable fraud, the sanctions delineated in Article 5.15 of the Education and Examination Regulations (EER) will apply. "],["software-setup.html", "Software Setup", " Software Setup This chapter will help you prepare for the course by showing how to install R and RStudio on your computer. If you’re already using R, there may be nothing new for you here. That being said, you should look over this chapter to ensure that your current setup will be compatible with the course requirements. If you have never used R before, this chapter is essential! The information is this chapter will be crucial for getting your computer ready for the course. "],["typographic-conventions.html", "Typographic Conventions", " Typographic Conventions Throughout this GitBook, we (try to) use a consistent set of typographic conventions: Functions are typeset in a code font, and the name of the function is always followed by parentheses. E.g., sum(), mean() Other R objects (e.g., data objects, function arguments) are in also typeset in a code font but without parentheses. E.g., seTE, method.tau Sometimes, we’ll use the package name followed by two colons (::, the so-called *scope-resolution operator), like lavaan::sem(). This command is valid R code and will run if you copy it into your R console. The lavaan:: part of the command tells R that we want to use the sem() from the lavaan package. "],["installing-software.html", "Installing software", " Installing software Before we start the course, we have to install two crucial pieces of software: R: A free program for statistical programming RStudio: An integrated development environment (IDE) which makes it easier to work with R. Installing R The latest version of R is available here. Click the appropriate link for your operating system and follow the instructions for installing the latest stable release. Depending on which OS you select, you may be given an option to install different components (e.g., base, contrib, Rtools). For this course, you will only need the base package. Installing RStudio Download the Free Desktop version of RStudio from the download page of the Posit website. Installing packages To participate in this course, you will need to install several additional R packages. For example, we’ll make extensive use of the three packages described in the following table. Package Description lavaan A sophisticated and user-friendly package for structural equation modeling dplyr A powerful suite of data-processing tools ggplot2 A flexible and user-friendly package for making graphs For the most part, you’ll install new packages when necessary as part of the weekly practical exercises. But, you might as well get a head start by installng lavaan, dplyr, and ggplot2 now. You don’t need any fancy tools to install new packages, we simply call the install.packages() function in R. Open RStudio Inside RStudio, find the window named Console on left side of the screen. Copy the following code into the console and hit Enter/Return to run the command. install.packages(c(&quot;lavaan&quot;, &quot;dplyr&quot;, &quot;ggplot2&quot;), dependencies = TRUE) Compiling packages from source On Windows and Mac, R packages are distributed in two ways: Pre-compiled binary executables Binary packages can be run directly (equivalent to .exe files on Windows). You don’t need any special tools to install binary packages. Archives of source code Packages installed via source code must be compiled locally. You will need an appropriate toolchain to build and install the package. New versions of a package are usually distributed via source code before they get a binary release. So this option will get you the latest versions of the packages. When you run the above command, you may see a message asking if you would like to compile certain packages from source. If so, it’s usually best to accept this option. You may also get a message asking if you want to install Rtools. A typical Windows setup is missing the toolchain needed to compile R packages from source, so the R folks have packaged the necessary tools in a standalone software bundle called Rtools. You can find the appropriate Rtools installer through this CRAN page. Follow the links for your R version and operating system. "],["course-data.html", "Course Data", " Course Data All of the data files you will need for the course are available in this SurfDrive directory. Follow the link to download a ZIP archive containing the data you will need to complete the practical exercises and assignments. Extract these data files to a convenient location on your computer. "],["note-on-data-updates.html", "Note on Data Updates", " Note on Data Updates During the course, we may need to update some of these datasets and/or add some new datasets to the SurfDrive directory. If so, you will need to download the updated data. We will let you know if and when any datasets are modified. In such situations, you are responsible for updating your data. Working with outdated data will probably produce incorrect results. Your answer won’t match the solutions we expect. Your answer will be marked as incorrect, even if the code used to produce the answer is correct. Points lost on an assignment due to using outdated datasets will not be returned. "],["introduction-to-r.html", "1 Introduction to R", " 1 Introduction to R This week is all about getting up-and-running with R and RStudio. Homework before the lecture Complete the preparatory material: Read over the Course Information chapter Work through the Software Setup chapter Watch the Lecture Recording for this week. Homework before the practical Complete the At-Home Exercises. Practical content During the practical you will work on the In-Class Exercises. "],["lecture.html", "1.1 Lecture", " 1.1 Lecture This week, you will learn the basics of R and RStudio. Rather than re-inventing the proverbial wheel, we’re linked to existing resources developed by R-Ladies Sydney. 1.1.1 Recordings Tour of RStudio \\[\\\\[6pt]\\] R Packages \\[\\\\[6pt]\\] Data I/0 1.1.2 Slides You can access the accompanying resources on the R-Ladies Sydney website here. "],["reading.html", "1.2 Reading", " 1.2 Reading There is no official reading this week. If you’d like to deepen your dive into R, feel free to check out Hadley Wickham’s excellent book R for Data Science. Otherwise, you may want to get a jump-start on the At-Home Exercises for this week. \\[\\\\[12pt]\\] "],["at-home-exercises.html", "1.3 At-Home Exercises", " 1.3 At-Home Exercises This week is all about gaining familiarity with R and RStudio. We’ll be using material from the introductory tutorials available at https://www.openstatprog.com. These exercises work through the basics of R usage and data types. Although you should already have R working, this week’s practical exercises don’t require that you have R installed since you’ll be able to complete the R practice problems in your web browser. You can access the two parts of the At-Home Exercises via the following links. Part 1: First Steps in R Part 2: R Data Types End of At-Home Exercises "],["in-class-exercises.html", "1.4 In-Class Exercises", " 1.4 In-Class Exercises In this week’s practical, we’ll go a little further into what’s possible with R. Don’t worry if you cannot remember everything in these primers—they’re only meant to familiarize you with what is possible and to get you some experience interacting with R and RStudio. You can access the two parts of this week’s In-Class Exercises via the following links. Part 1: Data Visualization Part 2: Data Transformation Recap Hopefully, after completing the practical exercises for this week, you feel more comfortable using R’s basic functionality. Here’s a brief description of the functions covered in this week’s practical exercises: install.packages() for installing packages Remember to put the package names in quotes library() for loading packages View() for viewing your dataset select() for picking only certain columns filter() for picking only certain rows arrange() for changing the rows order %&gt;% aka “the pipe” for chaining commands together In RStudio, you can hit ctrl+shift+m as a handy key combination ? for help files Logical tests and Boolean operators == equal to != not equal to &lt; less than &lt;= less than or equal to &gt; greater than &gt;= greater than or equal to is.na() is the value NA (not available) !is.na is the value not NA &amp; and (true only if the left and right are both true) | or (true if either the left or right are true) ! not (invert true/false) %in% in (is left in the larger set of right values) any() any (true if any in the set are true) all() all (true if all in the set are true) xor() xor (true if one and only one of the set are true) ggplot2 ggplot() create the basic object from which to building a plot aes() contains the aesthetic mappings (like x and y) geom_bar() bar plots for distributions of categorical variables geom_point() scatterplots for plotting two continuous variables geom_label_repel() for plotting text facet_wrap() for creating sets of conditional plots End of In-Class Exercises "],["statistical-modeling-path-analysis.html", "2 Statistical Modeling &amp; Path Analysis", " 2 Statistical Modeling &amp; Path Analysis This week, we will cover statistical modeling and path analysis. Homework before the lecture Watch the Lecture Recording for this week. Complete the Reading for this week, and answer the associated reading questions. Homework before the practical Complete the At-Home Exercises. Practical content During the practical you will work on the In-Class Exercises. "],["lecture-1.html", "2.1 Lecture", " 2.1 Lecture In this lecture, we will begin by discussing the paradigm and contextualizing statistical modeling relative to other ways that we can conduct statistical analyses. We will conclude with an introduction to path analysis. 2.1.1 Recordings Statistical Reasoning Statistical Modeling Path Analysis 2.1.2 Slides You can download the lectures slides here "],["reading-1.html", "2.2 Reading", " 2.2 Reading Reference Smaldino, P. E. (2017). Models are stupid, and we need more of them. In R.R. Vallacher, S.J. Read, &amp; A. Nowakt (Eds.), Computational Social Psychology (pp. 311–331). New York: Routledge. SKIP PAGES 322 - 327 Questions What are the differences between a “verbal model” and a “formal model”? As explained in the paragraph “A Brief Note on Statistical Models”, formal models are not the same as statistical models. Still, we can learn a lot from Smaldino’s approach. Write down three insights from this paper that you would like to apply to your statistical modeling during this course. Suggested Reading (Optional) The following paper is not required, but it’s definitely worth a read. Breiman provides a very interesting perspective on different ways to approach a modeling-based analysis. Breiman, L. (2001). Statistical Modeling: The Two Cultures (with comments and a rejoinder by the author). Statistical Science, 16(3) 199–231. https://doi.org/10.1214/ss/1009213726 "],["at-home-exercises-1.html", "2.3 At-Home Exercises", " 2.3 At-Home Exercises 2.3.1 Setup To complete the following exercises, you’ll need to install the packages described in the following table. Package Description haven Loading data from SPSS ‘.sav’ files tidySEM Plotting and tabulating the output of SEM-models Use the install.packages() function to install these packages. Click for explanation Open RStudio Inside RStudio, find the window named Console on left side of the screen. Copy the following code into the console and hit Enter/Return to run the command. install.packages(c(&quot;haven&quot;, &quot;tidySEM&quot;), dependencies = TRUE) 2.3.2 Use the haven::read_spss() function to load the LifeSat.sav data. Click for explanation library(dplyr) library(haven) LifeSat &lt;- read_spss(&quot;LifeSat.sav&quot;) 2.3.3 Make a table of descriptive statistics for the variables: LifSat, educ, ChildSup, SpouSup, and age. What is the average age in the sample? What is the range (youngest and oldest child)? Hint: Use the tidySEM::descriptives() function.` Click for explanation The package tidySEM contains the descriptives() function for computing descriptive statistics. The describe() function in the psych package is a good alternative. library(tidySEM) descriptives(LifeSat[ , c(&quot;LifSat&quot;, &quot;educ&quot;, &quot;ChildSup&quot;, &quot;SpouSup&quot;, &quot;age&quot;)]) 2.3.4 Run a simple linear regression with LifSat as the dependent variable and educ as the independent variable. Hints: The lm() function (short for linear model) does linear regression. The summary() function provides relevant summary statistics for the model. It can be helpful to store the results of your analysis in an object. Click for explanation results &lt;- lm(LifSat ~ educ, data = LifeSat) summary(results) ## ## Call: ## lm(formula = LifSat ~ educ, data = LifeSat) ## ## Residuals: ## Min 1Q Median 3Q Max ## -43.781 -11.866 2.018 12.418 43.018 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 35.184 7.874 4.469 2.15e-05 *** ## educ 3.466 1.173 2.956 0.00392 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 17.64 on 96 degrees of freedom ## Multiple R-squared: 0.08344, Adjusted R-squared: 0.0739 ## F-statistic: 8.74 on 1 and 96 DF, p-value: 0.003918 2.3.5 Repeat the analysis from 2.3.4 with age as the independent variable. Click for explanation results &lt;- lm(LifSat ~ age, data = LifeSat) summary(results) ## ## Call: ## lm(formula = LifSat ~ age, data = LifeSat) ## ## Residuals: ## Min 1Q Median 3Q Max ## -35.321 -14.184 3.192 13.593 40.626 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 200.2302 52.1385 3.840 0.00022 *** ## age -2.0265 0.7417 -2.732 0.00749 ** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 17.75 on 96 degrees of freedom ## Multiple R-squared: 0.07215, Adjusted R-squared: 0.06249 ## F-statistic: 7.465 on 1 and 96 DF, p-value: 0.007487 2.3.6 Repeat the analysis from 2.3.4 and 2.3.5 with ChildSup as the independent variable. Click for explanation results &lt;- lm(LifSat ~ ChildSup, data = LifeSat) summary(results) ## ## Call: ## lm(formula = LifSat ~ ChildSup, data = LifeSat) ## ## Residuals: ## Min 1Q Median 3Q Max ## -37.32 -12.14 0.66 12.41 44.68 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 37.559 8.342 4.502 1.89e-05 *** ## ChildSup 2.960 1.188 2.492 0.0144 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 17.86 on 96 degrees of freedom ## Multiple R-squared: 0.06076, Adjusted R-squared: 0.05098 ## F-statistic: 6.211 on 1 and 96 DF, p-value: 0.01441 2.3.7 Run a multiple linear regression with LifSat as the dependent variable and educ, age, and ChildSup as the independent variables. Hint: You can use the + sign to add multiple variables to the right hand side (RHS) of your model formula. Click for explanation results &lt;- lm(LifSat ~ educ + age + ChildSup, data = LifeSat) summary(results) ## ## Call: ## lm(formula = LifSat ~ educ + age + ChildSup, data = LifeSat) ## ## Residuals: ## Min 1Q Median 3Q Max ## -32.98 -12.56 2.68 11.03 41.91 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 134.9801 53.2798 2.533 0.0130 * ## educ 2.8171 1.1436 2.463 0.0156 * ## age -1.5952 0.7188 -2.219 0.0289 * ## ChildSup 2.4092 1.1361 2.121 0.0366 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 16.92 on 94 degrees of freedom ## Multiple R-squared: 0.1741, Adjusted R-squared: 0.1477 ## F-statistic: 6.603 on 3 and 94 DF, p-value: 0.0004254 2.3.8 Compare the results from 2.3.7 with those from 2.3.4, 2.3.5, and 2.3.6. What do you notice when you compare the estimated slopes for each of the three predictors in the multiple regression model with the corresponding estimates from the simple regression models? End of At-Home Exercises "],["in-class-exercises-1.html", "2.4 In-Class Exercises", " 2.4 In-Class Exercises During this practical, you will work through some exercises meant to expand your statistical reasoning skills and improve your understanding of linear models. For this exercise, having some familiarity with regression will be helpful. If you feel like you need to refresh your knowledge in this area, consider the resources listed in the background knowledge section. 2.4.1 Setup Data: You will use the following dataset for these exercises. Sesam.sav Drivers.sav Packages: To complete these exercises, you will need to install the packages described in the following table. Package Description lavaan A sophisticated and user-friendly package for structural equation modeling dplyr A powerful suite of data-processing tools magrittr Fancy pipe operators ggplot2 A flexible and user-friendly package for making graphs psych Descriptive statistics and tests of bivariate association Use the install.packages() function to install these packages. Click to show code install.packages(c(&quot;lavaan&quot;, &quot;magrittr&quot;, &quot;ggplot2&quot;, &quot;psych&quot;), dependencies = TRUE) 2.4.2 Data Exploration Load the “Sesam.sav” data. # Load the `dplyr` package for data processing library(dplyr) # Load the `haven` package for reading in SPSS files: library(haven) ## Load the &#39;Sesam.sav&#39; data ## Use haven::zap_formats() to remove SPSS attributes sesam &lt;- read_sav(file = &quot;Sesam.sav&quot;) |&gt; zap_formats() This file is part of a larger dataset that evaluates the impact of the first year of the Sesame Street television series. Sesame Street is mainly concerned with teaching preschool related skills to children in the 3–5 year age range. The following variables will be used in these exercises: age: Ages measured in months prelet: Knowledge of letters before watching Sesame Street (range: 0–58) prenumb: Knowledge of numbers before watching Sesame Street (range: 0–54) prerelat: Knowledge of size/amount/position relationships before watching Sesame Street (range: 0–17) peabody: Vocabulary maturity before watching Sesame Street (range: 20–120) postnumb: Knowledge of numbers after a year of watching Sesame Street (range: 0–54) Note: Unless stated otherwise, the following questions refer to the sesam data and the above variables. 2.4.2.1 What is the type of each variable? Hint: The output of the str() function should be helpful here. Click to show code ## Examine the data structure: str(sesam) ## tibble [240 × 8] (S3: tbl_df/tbl/data.frame) ## $ id : num [1:240] 1 2 3 4 5 6 7 8 9 10 ... ## $ age : num [1:240] 66 67 56 49 69 54 47 51 69 53 ... ## $ prelet : num [1:240] 23 26 14 11 47 26 12 48 44 38 ... ## $ prenumb : num [1:240] 40 39 9 14 51 33 13 52 42 31 ... ## $ prerelat: num [1:240] 14 16 9 9 17 14 11 15 15 10 ... ## $ peabody : num [1:240] 62 80 32 27 71 32 28 38 49 32 ... ## $ postnumb: num [1:240] 44 39 40 19 54 39 44 51 48 52 ... ## $ gain : num [1:240] 4 0 31 5 3 6 31 -1 6 21 ... ## ..- attr(*, &quot;display_width&quot;)= int 10 Click for explanation All variables are numeric. str() uses the abbreviation “num” to indicate a numeric vector. 2.4.2.2 What is the average age in the sample? What is the age range (youngest and oldest child)? Hint: Use tidySEM::descriptives() Click to show code As in the take home exercises, you can use the descriptives() function from the tidySEM package to describe the data: library(tidySEM) descriptives(sesam) Click for explanation We can get the average age from the “mean” column in the table (51.5), and the age range from the columns “min” and “max”, (34 and 69, respectively.) 2.4.2.3 What is the average gain in knowledge of numbers? What is the standard deviation of this gain? Hints: You will need to compute the gain and save the change score as a new object. You can then use the base-R functions mean() and sd() to do the calculations. Click to show code Create a new variable that represents the difference between pre- and post-test scores on knowledge of numbers: sesam &lt;- mutate(sesam, ndif = postnumb - prenumb) Compute the mean and SD of the change score: sesam |&gt; summarise(mean(ndif), sd(ndif)) 2.4.2.4 Create an appropriate visualization of the gain scores you computed in 2.4.2.3. Justify your choice of visualization. Hint: Recall the visualizations for continuous variables covered in the Week 1 In-Class Exercises Click to show code library(ggplot2) ## Create an empty baseline plot object: p &lt;- ggplot(sesam, aes(x = ndif)) ## Add some appropriate geoms: p + geom_histogram() p + geom_density() p + geom_boxplot() Click for explanation Because the gain score is numeric, we should use something appropriate for showing the distribution of a continuous variable. In this case, we can use either a density plot, or a histogram (remember from the lecture, this is like a density plot, but binned). We can also use a box plot, which can be a concise way to display a lot of information about a variable in a little less space. 2.4.2.5 Create a visualization that provides information about the bivariate relationship between the pre- and post-test number knowledge. Justify your choice of visualization. Describe the relationship based on what you see in your visualization. Hint: Again, some of the visualizations covered in the Week 1 In-Class Exercises may be useful. Click to show code ## Create a scatterplot of the pre- and post-test number knowledge ggplot(sesam, aes(x = prenumb, y = postnumb)) + geom_point() Click for explanation A scatterplot is a good tool for showing patterns in the way that two continuous variables relate to each other. From it, we can quickly gather information about whether a relationship exists, its direction, its strength, how much variation there is, and whether or not a relationship might be non-linear. Based on this scatterplot, we see a positive relationship between the prior knowledge of numbers and the knowledge of numbers at the end of the study. Children who started with a higher level of numeracy also ended with a higher level of numeracy. There is a considerable amount of variance in the relationship. Not every child increases their numeracy between pre-test and post-test. Children show differing amounts of increase. 2.4.3 Linear Modeling 2.4.3.1 Are there significant, bivariate associations between postnumb and the following variables? age prelet prenumb prerelat peabody Use Pearson correlations to answer this question. You do not need to check the assumptions here (though you would in real life). Hint: The base-R cor.test() function and the corr.test() function from the psych package will both conduct hypothesis tests for a correlation coefficients (the base-R cor() function only computes the coefficients). Click to show code library(psych) ## Test the correlations using psych::corr.test(): sesam |&gt; select(postnumb, age, prelet, prenumb, prerelat, peabody) |&gt; corr.test() ## Call:corr.test(x = select(sesam, postnumb, age, prelet, prenumb, prerelat, ## peabody)) ## Correlation matrix ## postnumb age prelet prenumb prerelat peabody ## postnumb 1.00 0.34 0.50 0.68 0.54 0.52 ## age 0.34 1.00 0.33 0.43 0.44 0.29 ## prelet 0.50 0.33 1.00 0.72 0.47 0.40 ## prenumb 0.68 0.43 0.72 1.00 0.72 0.61 ## prerelat 0.54 0.44 0.47 0.72 1.00 0.56 ## peabody 0.52 0.29 0.40 0.61 0.56 1.00 ## Sample Size ## [1] 240 ## Probability values (Entries above the diagonal are adjusted for multiple tests.) ## postnumb age prelet prenumb prerelat peabody ## postnumb 0 0 0 0 0 0 ## age 0 0 0 0 0 0 ## prelet 0 0 0 0 0 0 ## prenumb 0 0 0 0 0 0 ## prerelat 0 0 0 0 0 0 ## peabody 0 0 0 0 0 0 ## ## To see confidence intervals of the correlations, print with the short=FALSE option ## OR ## library(magrittr) ## Test the correlations using multiple cor.test() calls: sesam %$% cor.test(postnumb, age) ## ## Pearson&#39;s product-moment correlation ## ## data: postnumb and age ## t = 5.5972, df = 238, p-value = 5.979e-08 ## alternative hypothesis: true correlation is not equal to 0 ## 95 percent confidence interval: ## 0.2241066 0.4483253 ## sample estimates: ## cor ## 0.3410578 sesam %$% cor.test(postnumb, prelet) ## ## Pearson&#39;s product-moment correlation ## ## data: postnumb and prelet ## t = 8.9986, df = 238, p-value &lt; 2.2e-16 ## alternative hypothesis: true correlation is not equal to 0 ## 95 percent confidence interval: ## 0.4029239 0.5926632 ## sample estimates: ## cor ## 0.5038464 sesam %$% cor.test(postnumb, prenumb) ## ## Pearson&#39;s product-moment correlation ## ## data: postnumb and prenumb ## t = 14.133, df = 238, p-value &lt; 2.2e-16 ## alternative hypothesis: true correlation is not equal to 0 ## 95 percent confidence interval: ## 0.6002172 0.7389277 ## sample estimates: ## cor ## 0.6755051 sesam %$% cor.test(postnumb, prerelat) ## ## Pearson&#39;s product-moment correlation ## ## data: postnumb and prerelat ## t = 9.9857, df = 238, p-value &lt; 2.2e-16 ## alternative hypothesis: true correlation is not equal to 0 ## 95 percent confidence interval: ## 0.4475469 0.6268773 ## sample estimates: ## cor ## 0.5433818 sesam %$% cor.test(postnumb, peabody) ## ## Pearson&#39;s product-moment correlation ## ## data: postnumb and peabody ## t = 9.395, df = 238, p-value &lt; 2.2e-16 ## alternative hypothesis: true correlation is not equal to 0 ## 95 percent confidence interval: ## 0.4212427 0.6067923 ## sample estimates: ## cor ## 0.520128 Click for explanation Yes, based on the p-values (remember that 0 here really means very small, making it less than .05), we would say that there are significant correlations between postnumb and all other variables in the data. (In fact, all variables in the data are significantly correlated with one another.) 2.4.3.2 Do age and prenumb explain a significant proportion of the variance in postnumb? What statistic did you use to justify your conclusion? Interpret the model fit. Use the lm() function to fit your model. Click to show code lmOut &lt;- lm(postnumb ~ age + prenumb, data = sesam) summary(lmOut) ## ## Call: ## lm(formula = postnumb ~ age + prenumb, data = sesam) ## ## Residuals: ## Min 1Q Median 3Q Max ## -38.130 -6.456 -0.456 5.435 22.568 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 7.4242 5.1854 1.432 0.154 ## age 0.1225 0.1084 1.131 0.259 ## prenumb 0.7809 0.0637 12.259 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 9.486 on 237 degrees of freedom ## Multiple R-squared: 0.4592, Adjusted R-squared: 0.4547 ## F-statistic: 100.6 on 2 and 237 DF, p-value: &lt; 2.2e-16 Click for explanation Yes, age and prenumb explain a significant amount of variability in postnumb (\\(R^2 = 0.459\\), \\(F[2, 237] = 100.629\\), \\(p &lt; 0.001\\)). We use the F statistic for the overall test of model fit to support this conclusion. The variables age and prenumb together explain 45.9% of the variability in postnumb. 2.4.3.3 Write the null and alternative hypotheses tested for in 2.4.3.2. Click for explanation Since we are testing for explained variance, our hypotheses concern the \\(R^2\\). \\[ \\begin{align*} H_0: R^2 = 0\\\\ H_1: R^2 &gt; 0 \\end{align*} \\] Note that this is a directional hypotheses because the \\(R^2\\) cannot be negative. 2.4.3.4 Define the model syntax to estimate the model from 2.4.3.2 as a path analysis using lavaan. Click to show code mod &lt;- &#39;postnumb ~ 1 + age + prenumb&#39; 2.4.3.5 Estimate the path analytic model you defined above. Use the lavaan::sem() function to estimate the model. Click to show code library(lavaan) lavOut1 &lt;- sem(mod, data = sesam) 2.4.3.6 Summarize the fitted model you estimated above. Use the summary() function to summarize the model. Click to show code summary(lavOut1) ## lavaan 0.6-19 ended normally after 1 iteration ## ## Estimator ML ## Optimization method NLMINB ## Number of model parameters 4 ## ## Number of observations 240 ## ## Model Test User Model: ## ## Test statistic 0.000 ## Degrees of freedom 0 ## ## Parameter Estimates: ## ## Standard errors Standard ## Information Expected ## Information saturated (h1) model Structured ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) ## postnumb ~ ## age 0.123 0.108 1.138 0.255 ## prenumb 0.781 0.063 12.336 0.000 ## ## Intercepts: ## Estimate Std.Err z-value P(&gt;|z|) ## .postnumb 7.424 5.153 1.441 0.150 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) ## .postnumb 88.864 8.112 10.954 0.000 In OLS regression, the predictor variables are usually treated as fixed and do not covary. We can easily relax this assumption in path analysis. 2.4.3.7 Re-estimate the path analytic model you defined in 2.4.3.4. Specify the predictors as random, correlated variables. Hint: You can make the predictors random in, at least, two ways: Modify the model syntax to specify the correlation between age and prenumb. Add fixed.x = FALSE to your sem() call. Click to show code lavOut2 &lt;- sem(mod, data = sesam, fixed.x = FALSE) ## OR ## mod &lt;- &#39; postnumb ~ 1 + age + prenumb age ~~ prenumb &#39; lavOut2 &lt;- sem(mod, data = sesam) 2.4.3.8 Summarize the fitted model you estimated above. Compare the results to those from the OLS regression in 2.4.3.2 and the path model in 2.4.3.5. Click to show code summary(lavOut2) ## lavaan 0.6-19 ended normally after 26 iterations ## ## Estimator ML ## Optimization method NLMINB ## Number of model parameters 9 ## ## Number of observations 240 ## ## Model Test User Model: ## ## Test statistic 0.000 ## Degrees of freedom 0 ## ## Parameter Estimates: ## ## Standard errors Standard ## Information Expected ## Information saturated (h1) model Structured ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) ## postnumb ~ ## age 0.123 0.108 1.138 0.255 ## prenumb 0.781 0.063 12.336 0.000 ## ## Covariances: ## Estimate Std.Err z-value P(&gt;|z|) ## age ~~ ## prenumb 28.930 4.701 6.154 0.000 ## ## Intercepts: ## Estimate Std.Err z-value P(&gt;|z|) ## .postnumb 7.424 5.153 1.441 0.150 ## age 51.525 0.405 127.344 0.000 ## prenumb 20.896 0.688 30.359 0.000 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) ## .postnumb 88.864 8.112 10.954 0.000 ## age 39.291 3.587 10.954 0.000 ## prenumb 113.702 10.379 10.954 0.000 summary(lavOut1) ## lavaan 0.6-19 ended normally after 1 iteration ## ## Estimator ML ## Optimization method NLMINB ## Number of model parameters 4 ## ## Number of observations 240 ## ## Model Test User Model: ## ## Test statistic 0.000 ## Degrees of freedom 0 ## ## Parameter Estimates: ## ## Standard errors Standard ## Information Expected ## Information saturated (h1) model Structured ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) ## postnumb ~ ## age 0.123 0.108 1.138 0.255 ## prenumb 0.781 0.063 12.336 0.000 ## ## Intercepts: ## Estimate Std.Err z-value P(&gt;|z|) ## .postnumb 7.424 5.153 1.441 0.150 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) ## .postnumb 88.864 8.112 10.954 0.000 summary(lmOut) ## ## Call: ## lm(formula = postnumb ~ age + prenumb, data = sesam) ## ## Residuals: ## Min 1Q Median 3Q Max ## -38.130 -6.456 -0.456 5.435 22.568 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 7.4242 5.1854 1.432 0.154 ## age 0.1225 0.1084 1.131 0.259 ## prenumb 0.7809 0.0637 12.259 &lt;2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 9.486 on 237 degrees of freedom ## Multiple R-squared: 0.4592, Adjusted R-squared: 0.4547 ## F-statistic: 100.6 on 2 and 237 DF, p-value: &lt; 2.2e-16 2.4.3.9 Consider the path model below. How many regression coefficients are estimated in this model? How many variances are estimated? How many covariances are estimated? Click for explanation Six regression coefficients (red) Four (residual) variances (blue) No covariances 2.4.3.10 Consider a multiple regression analysis with three continuous independent variables: scores on tests of language, history, and logic, and one continuous dependent variable: score on a math test. We want to know if scores on the language, history, and logic tests can predict the math test score. Sketch a path model that you could use to answer this question How many regression parameters are there? How many variances could you estimate? How many covariances could you estimate? 2.4.4 Categorical IVs Load the Drivers.sav data. # Read the data into a data frame named &#39;drivers&#39;: drivers &lt;- read_sav(&quot;Drivers.sav&quot;) |&gt; as_factor() # This preserves the SPSS labels for nominal variables In this section, we will evaluate the following research question: Does talking on the phone interfere with people’s driving skills? These data come from an experiment. The condition variable represents the three experimental conditions: Hand-held phone Hands-free phone Control (no phone) We will use condition as the IV in our models. The DV, RT, represents the participant’s reaction time (in milliseconds) during a driving simulation. 2.4.4.1 Use the package ggplot2 to create a density plot for the variable RT. What concept are we representing with this plot? Hint: Consider the lap times example from the statistical modeling section of Lecture 2. Click to show code ggplot(drivers, aes(x = RT)) + geom_density() Click for explanation This shows the distribution of all the combined reaction times from drivers in all three categories. 2.4.4.2 Modify this density plot by mapping the variable condition from your data to the fill aesthetic in ggplot. What is the difference between this plot and the previous plot? Do you think there is evidence for differences between the groups? How might we test this by fitting a model to our sample? Click to show code Hint: To modify the transparency of the densities, use the aesthetic alpha. ggplot(drivers, aes(x = RT, fill = condition)) + geom_density(alpha = .5) Click for explanation This figure models the conditional distribution of reaction time, where the type of cell phone usage is the grouping factor. Things you can look at to visually assess whether the three groups differ are the amount of overlap of the distributions, how much distance there is between the individual means, and whether the combined distribution is much different than the conditional distributions. If we are willing to assume that these conditional distributions are normally distributed and have equivalent variances, we could use a linear model with dummy-coded predictors. Aside: ANOVA vs. Linear Regression As you may know, the mathematical model underlying ANOVA is just a linear regression model with nominal IVs. So, in terms of the underlying statistical models, there is no difference between ANOVA and regression; the differences lie in the focus of the analysis. ANOVA is really a type of statistical test wherein we are testing hypotheses about the effects of some set of nominal grouping factors on some continuous outcome. When doing an ANOVA, we usually don’t interact directly with the parameter estimates from the underlying model. Regression is a type of statistical model (i.e., a way to represent a univariate distribution with a conditional mean and fixed variance). When we do a regression analysis, we primarily focus on the estimated parameters of the underling linear model. When doing ANOVA in R, we estimate the model exactly as we would for linear regression; we simply summarize the results differently. If you want to summarize your model in terms of the sums of squares table you usually see when running an ANOVA, you can supply your fitted lm object to the anova() function. This is a statistical modeling course, not a statistical testing course, so we will not consider ANOVA any further. 2.4.4.3 Estimate a linear model that will answer the research question stated in the beginning of this section. Use lm() to estimate the model. Summarize the fitted model and use the results to answer the research question. Click to show code library(magrittr) lmOut &lt;- drivers |&gt; mutate(condition = relevel(condition, ref = &quot;control&quot;)) %$% lm(RT ~ condition) summary(lmOut) ## ## Call: ## lm(formula = RT ~ condition) ## ## Residuals: ## Min 1Q Median 3Q Max ## -317.50 -71.25 2.98 89.55 243.45 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 553.75 29.08 19.042 &lt;2e-16 *** ## conditionhand-held 100.75 41.13 2.450 0.0174 * ## conditionhands-free 63.80 41.13 1.551 0.1264 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 130.1 on 57 degrees of freedom ## Multiple R-squared: 0.09729, Adjusted R-squared: 0.06562 ## F-statistic: 3.072 on 2 and 57 DF, p-value: 0.05408 anova(lmOut) Click for explanation The effect of condition on RT is nonsignificant (\\(F[2, 57] = 3.07\\), \\(p = 0.054\\)). Therefore, based on these results, we do not have evidence for an effect of mobile phone usage on driving performance. 2.4.4.4 Use lavaan to estimate the model from 2.4.4.3 as a path model. Hint: lavaan won’t let us use factors for our categorical predictors. So, you will need to create your own dummy codes. Click to show code ## Specify the model syntax: mod &lt;- &#39;RT ~ 1 + HH + HF&#39; ## Dummy code the factor variable: drivers2 &lt;- mutate(drivers, ## Create dummy code for &quot;hand-held&quot; condition: HH = ifelse(condition == &quot;hand-held&quot;, 1, 0), ## Create dummy code for &quot;hands-free&quot; condition: HF = ifelse(condition == &quot;hands-free&quot;, 1, 0) ) ## Estimate the path model: lavOut &lt;- sem(mod, data = drivers2) ## Summarize the results: summary(lavOut) ## lavaan 0.6-19 ended normally after 1 iteration ## ## Estimator ML ## Optimization method NLMINB ## Number of model parameters 4 ## ## Number of observations 60 ## ## Model Test User Model: ## ## Test statistic 0.000 ## Degrees of freedom 0 ## ## Parameter Estimates: ## ## Standard errors Standard ## Information Expected ## Information saturated (h1) model Structured ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) ## RT ~ ## HH 100.750 40.085 2.513 0.012 ## HF 63.800 40.085 1.592 0.111 ## ## Intercepts: ## Estimate Std.Err z-value P(&gt;|z|) ## .RT 553.750 28.344 19.537 0.000 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) ## .RT 16068.028 2933.607 5.477 0.000 Alternatively, we can combine the data processing and model estimation into a single pipeline, as shown below. This type of combined approach might be preferable if we do not want to permanently add the dummy codes to the drivers dataset. The multi-step approach shown above would be better if we were going to reuse the dummy codes in subsequent analyses. lavOut2 &lt;- drivers |&gt; mutate(HH = ifelse(condition == &quot;hand-held&quot;, 1, 0), HF = ifelse(condition == &quot;hands-free&quot;, 1, 0) ) |&gt; sem(mod, data = _) # Estimate the model ## Do the two approaches produce the same results? all.equal( parameterEstimates(lavOut), parameterEstimates(lavOut2) ) ## [1] TRUE all.equal( fitMeasures(lavOut), fitMeasures(lavOut2) ) ## [1] TRUE At this point, we haven’t covered the tools you need to conduct the ANOVA-style tests with path models. So, you can’t yet answer the research question with the above model. When we discuss model comparisons, you’ll get the missing tools. End of In-Class Exercises "],["mediation-moderation.html", "3 Mediation &amp; Moderation", " 3 Mediation &amp; Moderation In this lecture, we will discuss two particular types of processes that we can model using path analysis: mediation and moderation. Homework before the lecture Watch the Lecture Recording for this week. Complete the Reading for this week, and answer the associated reading questions. Homework before the practical Complete the At-Home Exercises. Practical content During the practical you will work on the In-Class Exercises. "],["lecture-2.html", "3.1 Lecture", " 3.1 Lecture Researchers often have theories about possible causal processes linking multiple variables. Mediation is a particularly important example of such a process in which in an input variable, X, influences the outcome, Y, through an intermediary variable, M (the mediator). For instance, psychotherapy (X), may affect thoughts (M), which in turn affects mood (Y). We can investigate mediation via a specific sequence of linear regression equations, but path modeling will make our lives much easier. We can use path models to simultaneously estimate multiple related regression equations. So, mediation analysis is an ideal application of path modeling. In this lecture, we consider both approaches and discuss their relative strengths and weaknesses. As with mediation, researchers often posit theories involving moderation. Moderation implies that the effect of X on Y depends on another variable, Z. For instance, the effect of feedback (X) on performance (Y) may depend on age (Z). Older children might process feedback more effectively than younger children. Hence, the feedback is more effective for older children than for younger children, and the effect of feedback on performance is stronger for older children than for younger children. In such a case, we would say that age moderates the effect of feedback on performance. 3.1.1 Recordings Note: In the following recordings, the slide numbers are a bit of a mess, because I made these videos by cutting together recordings that used different slide decks. My apologies to those who are particularly distracted by continuity errors. Mediation Basics Mediation Testing Bootstrapping Moderation Basics Moderation Probing 3.1.2 Slides You can download the lecture slides here "],["reading-2.html", "3.2 Reading", " 3.2 Reading Reference Baron, R. M. &amp; Kenny, D. A. (1986). The moderator-mediator variable distinction in social psychological research: Conceptual, strategic, and statistical Considerations. Journal of Personality and Individual Differences, 51(6), 1173–1182 Questions What is mediation? Give an example of mediation. According to the authors, we must satisfy four criteria to infer mediation. What are these criteria? What is “moderation”, and how is it different from “mediation”? Give an example of moderation. What are the four methods given by Baron and Kenny as suitable ways to to study interaction effects? The authors suggest that one of the most common ways to address unreliability is to use multiple indicators. Thinking back to what you’ve learned about factor analysis, briefly explain why multiple indicators can improve reliability. How can you determine whether a variable is a mediator or moderator? Reference Hayes, A. F. (2009). Beyond Baron and Kenny: Statistical mediation analysis in the new millennium. Communication Monographs, 76(4), 408–420. Questions What is an indirect or mediated effect? What is the difference between the total and direct effect? What is the main problem with the Barron &amp; Kenny “Causal Steps Approach”? What is bootstrapping, and why is it a better way to test mediation than Sobel’s test? Explain how it is possible that “effects that don’t exist can be mediated”. "],["at-home-exercises-2.html", "3.3 At-Home Exercises", " 3.3 At-Home Exercises 3.3.1 Setup Data: You will need two datasets to complete the following exercises. SelfEsteem Sesam2 Packages: You will also need to install the forcats package. Package Description forcats A handy tidyverse package for manipulating categorical data Use the install.packages() function to install forcats. Click to show code install.packages(&quot;forcats&quot;, dependencies = TRUE) 3.3.2 Mediation In the first part of this practical, we will analyze the data contained in SelfEsteem.sav. These data comprise 143 observations of the following variables.1 case: Participant ID number ParAtt: Parental Attachment PeerAtt: Peer Attachment Emp: Empathy ProSoc: Prosocial behavior Aggr: Aggression SelfEst: Self-esteem 3.3.2.1 Load the SelfEsteem.sav data. Note: Unless otherwise specified, all analyses in Section 3.3.2 apply to these data. Click to show code library(haven) seData &lt;- read_sav(&quot;SelfEsteem.sav&quot;) Suppose we are interested in the (indirect) effect of peer attachment on self-esteem, and whether empathy has a mediating effect on this relationship. We might generate the following hypotheses: Better peer relationships promote higher self esteem This effect is mediated by a student’s empathy levels, where better peer relationships increase empathy, and higher levels of empathy lead to higher self-esteem. To evaluate these hypotheses, we will use lavaan to estimate a path model. 3.3.2.2 Draw a path model (on paper) that can be used to test the above hypotheses. Label the input (X), outcome (Y), and mediator/intermediary (M). Label the paths a, b, and c’. Hint: Refer back to the Mediation Basics lecture if you need help here. Click for explanation 3.3.2.3 Specify the lavaan model syntax implied by the path diagram shown above. Save the resulting character string as an object in your environment. Hint: Refer back to the example in which opinions of systematic racism mediate the relationship between political affiliation and support for affirmative action policies from the Mediation Testing lecture this week. Click to show code mod &lt;- &#39; ## Equation for outcome: SelfEst ~ Emp + PeerAtt ## Equation for the mediator: Emp ~ PeerAtt &#39; 3.3.2.4 Use the lavaan::sem() function to estimate the model defined in 3.3.2.3. Use the default settings in sem(). Click to show code library(lavaan) out &lt;- sem(mod, data = seData) 3.3.2.5 Explore the summary of the fitted model. Which numbers correspond to the a, b, and c’ paths? Interpret these paths. Do the direction of the effects seem to align with our hypothesis? Click to show code summary(out) ## lavaan 0.6-19 ended normally after 1 iteration ## ## Estimator ML ## Optimization method NLMINB ## Number of model parameters 5 ## ## Number of observations 143 ## ## Model Test User Model: ## ## Test statistic 0.000 ## Degrees of freedom 0 ## ## Parameter Estimates: ## ## Standard errors Standard ## Information Expected ## Information saturated (h1) model Structured ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) ## SelfEst ~ ## Emp 0.234 0.091 2.568 0.010 ## PeerAtt 0.174 0.088 1.968 0.049 ## Emp ~ ## PeerAtt 0.349 0.076 4.628 0.000 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) ## .SelfEst 0.934 0.110 8.456 0.000 ## .Emp 0.785 0.093 8.456 0.000 Click for explanation The results show estimates of the a path (Emp ~ PeerAtt), the b path (SelfEst ~ Emp), and the c’ path (SelfEst ~ PeerAtt). All three of these effects are positive and significant, including the direct effect of PeerAtt on SelfEst (\\(\\beta = 0.174\\), \\(Z = 1.97\\), \\(p = 0.025\\)), and the parts of the indirect effect made up by the effect of PeerAtt on Emp (\\(\\beta = 0.349\\), \\(Z = 4.63\\), \\(p = 0\\)), and Emp on SelfEst (\\(\\beta = 0.234\\), \\(Z = 2.57\\), \\(p = 0.005\\)). We can see that the direction of the effects seems to support of our hypotheses, but without taking the next steps to investigate the indirect effect, we should be hesitant to say more. Remember that an indirect effect (IE) is the product of multiple regression slopes. Therefore, to estimate an IE, we must define this product in our model syntax. In lavaan, we define the new IE parameter in two steps. Label the relevant regression paths. Use the labels to define a new parameter that represent the desired IE. We can define new parameters in lavaan model syntax via the := operator. The lavaan website contains a tutorial on this procedure: http://lavaan.ugent.be/tutorial/mediation.html 3.3.2.6 Use the procedure described above to modify the model syntax from 3.3.2.3 by adding the definition of the hypothesized IE from PeerAtt to SelfEst. Click to show code mod &lt;- &#39; ## Equation for outcome: SelfEst ~ b * Emp + PeerAtt ## Equation for mediator: Emp ~ a * PeerAtt ## Indirect effect: ie := a * b &#39; Click for explanation Notice that I only label the parameters that I will use to define the IE. You are free to label any parameter that you like, but I choose the to label only the minimally sufficient set to avoid cluttering the code/output. 3.3.2.7 Use lavaan::sem() to estimate the model with the IEs defined. Use the default settings for sem(). Is the hypothesized IE significant according to the default tests? Hint: Refer to the Mediation Testing lecture Click to show code out &lt;- sem(mod, data = seData) summary(out) ## lavaan 0.6-19 ended normally after 1 iteration ## ## Estimator ML ## Optimization method NLMINB ## Number of model parameters 5 ## ## Number of observations 143 ## ## Model Test User Model: ## ## Test statistic 0.000 ## Degrees of freedom 0 ## ## Parameter Estimates: ## ## Standard errors Standard ## Information Expected ## Information saturated (h1) model Structured ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) ## SelfEst ~ ## Emp (b) 0.234 0.091 2.568 0.010 ## PeerAtt 0.174 0.088 1.968 0.049 ## Emp ~ ## PeerAtt (a) 0.349 0.076 4.628 0.000 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) ## .SelfEst 0.934 0.110 8.456 0.000 ## .Emp 0.785 0.093 8.456 0.000 ## ## Defined Parameters: ## Estimate Std.Err z-value P(&gt;|z|) ## ie 0.082 0.036 2.245 0.025 Click for explanation The IE of Peer Attachment on Self Esteem through Empathy is statistically significant \\((\\hat{\\textit{IE}} = 0.082\\), \\(Z = 2.25\\), \\(p = 0.012)\\). Note: The p-value above doesn’t match the output because we’re testing a directional hypothesis, but lavaan conducts two-tailed tests for the model parameters. As we learned in the lecture, the above test of the indirect effect is equivalent to Sobel’s Z test (which we don’t really want). An appropriate, robust test of the indirect effect requires bootstrapping, which we will do later this week as part of the in-class exercises. For now, we’ll add another input variable to our model: parental attachment. We will use this model to evaluate the following research questions: Is there a direct effect of parental attachment on self-esteem, after controlling for peer attachment and empathy? Is there a direct effect of peer attachment on self-esteem, after controlling for parental attachment and empathy? Is the effect of parental attachment on self-esteem mediated by empathy, after controlling for peer attachment? Is the effect of peer attachment on self-esteem mediated by empathy, after controlling for parental attachment? 3.3.2.8 Run the path model needed to test the research questions listed above. Specify the lavaan model syntax implied by the research questions. Allow peer attachment and parental attachment to covary. Define two new parameters to represent the hypothesized indirect effects. Estimate the model using lavaan::sem(). Use the default settings in sem(). Investigate the model summary. Click to show code mod &lt;- &#39; ## Equation for outcome: SelfEst ~ b * Emp + c1 * ParAtt + c2 * PeerAtt ## Equation for mediator: Emp ~ a1 * ParAtt + a2 * PeerAtt ## Covariance: ParAtt ~~ PeerAtt ie_ParAtt := a1 * b ie_PeerAtt := a2 * b &#39; out &lt;- sem(mod, data = seData) summary(out) ## lavaan 0.6-19 ended normally after 16 iterations ## ## Estimator ML ## Optimization method NLMINB ## Number of model parameters 10 ## ## Number of observations 143 ## ## Model Test User Model: ## ## Test statistic 0.000 ## Degrees of freedom 0 ## ## Parameter Estimates: ## ## Standard errors Standard ## Information Expected ## Information saturated (h1) model Structured ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) ## SelfEst ~ ## Emp (b) 0.206 0.088 2.357 0.018 ## ParAtt (c1) 0.287 0.078 3.650 0.000 ## PeerAtt (c2) 0.024 0.094 0.252 0.801 ## Emp ~ ## ParAtt (a1) 0.078 0.075 1.045 0.296 ## PeerAtt (a2) 0.306 0.086 3.557 0.000 ## ## Covariances: ## Estimate Std.Err z-value P(&gt;|z|) ## ParAtt ~~ ## PeerAtt 0.537 0.103 5.215 0.000 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) ## .SelfEst 0.854 0.101 8.456 0.000 ## .Emp 0.779 0.092 8.456 0.000 ## ParAtt 1.277 0.151 8.456 0.000 ## PeerAtt 0.963 0.114 8.456 0.000 ## ## Defined Parameters: ## Estimate Std.Err z-value P(&gt;|z|) ## ie_ParAtt 0.016 0.017 0.956 0.339 ## ie_PeerAtt 0.063 0.032 1.965 0.049 3.3.2.9 What can we say about the two indirect effects? Can we say that empathy mediates both paths? Click to show explanation According to the Sobel-style test, after controlling for peer attachment, the indirect effect of parental attachment on self-esteem was nonsignificant \\((\\hat{\\textit{IE}} = 0.016\\), \\(Z = 0.96\\), \\(p = 0.339)\\), whereas the analogous direct effect was significant \\((\\hat{\\beta} = 0.287\\), \\(Z = 3.65\\), \\(p &lt; 0.001)\\). On the other hand, after controlling for parental attachment, the indirect effect of peer attachment on self-esteem was statistically significant \\((\\hat{\\textit{IE}} = 0.063\\), \\(Z = 1.96\\), \\(p = 0.049)\\), but the direct effect was nonsignificant \\((\\hat{\\beta} = 0.024\\), \\(Z = 0.25\\), \\(p = 0.801)\\). 3.3.3 Moderation Remember that moderation attempts to describe when one variable influences another. For the home exercise, we’ll go back to the Sesame Street data we worked with for the in-class exercises last week. 3.3.3.1 Load the Sesam2.sav data.2 NOTE: Unless otherwise specified, all analyses in Section 3.3.3 use these data. Click to show code # Read the data into an object called &#39;sesam2&#39;: sesam2 &lt;- read_sav(&quot;Sesam2.sav&quot;) VIEWCAT is a nominal grouping variable, but it is represented as a numeric variable in the sesam2 data. The levels represent the following frequencies of Sesame Street viewership of the children in the data: VIEWCAT = 1: Rarely/Never VIEWCAT = 2: 2–3 times a week VIEWCAT = 3: 4–5 times a week VIEWCAT = 4: &gt; 5 times a week 3.3.3.2 Convert VIEWCAT into a factor. Make sure that VIEWCAT = 1 is the reference group. Hints: You can identify the reference group with the levels() or contrasts() functions. The reference group is the group labelled with the first level printed by levels(). When you run contrasts(), you will see a pattern matrix that defines a certain dummy coding scheme. The reference group is the group that has zeros in each column of this matrix. If you need to change the reference group, you can use the relevel() function. Click to show code library(forcats) ## Convert &#39;VIEWCAT&#39; to a factor: sesam2 &lt;- sesam2 |&gt; mutate(VIEWCAT = factor(VIEWCAT)) ## Optionally specify the labels # sesam2 &lt;- # sesam2 |&gt; # mutate(VIEWCAT = factor(VIEWCAT, # levels = c(1, 2, 3, 4), # labels = c(&quot;Rarely/never&quot;, # &quot;2-3 times per week&quot;, # &quot;4-5 times per week&quot;, # &quot;&gt; 5 times per week&quot;))) ## Check the reference group: levels(sesam2$VIEWCAT) ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; contrasts(sesam2$VIEWCAT) ## 2 3 4 ## 1 0 0 0 ## 2 1 0 0 ## 3 0 1 0 ## 4 0 0 1 ## If necessary, relevel # sesam &lt;- # sesam2 |&gt; # mutate(VIEWCAT = relevel(VIEWCAT, 1)) 3.3.3.3 Use lm() to estimate a multiple regression model wherein VIEWCAT predicts POSTNUMB. Summarize the model. Interpret the estimates. Click to show code lmOut &lt;- lm(POSTNUMB ~ VIEWCAT, data = sesam2) summary(lmOut) ## ## Call: ## lm(formula = POSTNUMB ~ VIEWCAT, data = sesam2) ## ## Residuals: ## Min 1Q Median 3Q Max ## -25.474 -7.942 0.240 8.526 25.240 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 18.760 2.316 8.102 8.95e-14 *** ## VIEWCAT2 9.331 2.900 3.218 0.00154 ** ## VIEWCAT3 14.714 2.777 5.298 3.49e-07 *** ## VIEWCAT4 18.032 2.809 6.419 1.24e-09 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 11.58 on 175 degrees of freedom ## Multiple R-squared: 0.2102, Adjusted R-squared: 0.1967 ## F-statistic: 15.53 on 3 and 175 DF, p-value: 5.337e-09 Click for explanation Viewing category explains a statistically significant proportion of the variance in the post-test score of numbers learned (\\(R^2 = 0.21\\), \\(F(3, 175) = 15.53\\), \\(p &lt; 0.001\\)). Kids who never or rarely watched Sesame Street had an average score of 18.76 on the post-test. Kids with weekly viewing habits of 2–3, 4–5, or 5+ times per week all had significantly higher scores on the post-test than kids who never or rarely watched Sesame Street (2–3: \\(\\hat{\\beta} = 9.33\\), \\(t = 3.22\\), \\(p = 0.002\\); 4–5: \\(\\hat{\\beta} = 14.71\\), \\(t = 5.3\\), \\(p &lt; 0.001\\); 5+: \\(\\hat{\\beta} = 18.03\\), \\(t = 6.42\\), \\(p &lt; 0.001\\)). If we compare the box plot, kernel density plot, and model output below, the relationships between the regression coefficient estimates for the viewing categories and the group means should be evident. 3.3.3.4 Use ggplot() to make a scatterplot with AGE on the x-axis and POSTNUMB on the y-axis. Color the points according to the their VIEWCAT level. Save the plot object to a variable in your environment. Hint: You can map color to the levels of a variable on your dataset by assigning the variable names to the color argument of the aes() function in ggplot(). Click to show code library(ggplot2) ## Add aes(..., color = VIEWCAT) to get different colors for each group: p &lt;- ggplot(sesam2, aes(x = AGE, y = POSTNUMB, color = VIEWCAT)) + geom_point() # Add points for scatterplot ## Print the plot stored as &#39;p&#39;: p We assigned the global color aesthetic to the VIEWCAT variable, so the points are colored based on their group. 3.3.3.5 Add linear regression lines for each group to the above scatterplot. Hints: You can add regression lines with ggplot2::geom_smooth() To get linear regression lines, set the argument method = \"lm\" To omit error envelopes, set the argument se = FALSE Click to show code ## Add OLS best-fit lines: p + geom_smooth(method = &quot;lm&quot;, se = FALSE) The global color aesthetic assignment from above carries through to any additional plot elements that we add, including the regression lines. So, we also get a separate regression line for each VIEWCAT group. 3.3.3.6 How would you interpret the pattern of regression lines above? Click for explanation All the lines show a positive slope, so post-test number recognition appears to increase along with increasing age. The lines are not parallel, though. So VIEWCAT may be moderating the effect of AGE on POSTNUMB. Based on the figure we just created, we may want to test for moderation in our regression model. To do so, we need to add an interaction between AGE and VIEWCAT. The VIEWCAT factor is represented by 3 dummy codes in our model, though. So when we interact AGE and VIEWCAT, we will create 3 interaction terms. To test the overall moderating influence of VIEWCAT, we need to conduct a multiparameter hypothesis test of all 3 interaction terms. One way that we can go about implementing such a test is through a hierarchical regression analysis entailing three steps: Estimate the additive model wherein we regress POSTNUMB onto AGE and VIEWCAT without any interaction. Estimate the moderated model by adding the interaction between AGE and VIEWCAT into the additive model. Conduct a \\(\\Delta R^2\\) test to compare the fit of the two models. 3.3.3.7 Conduct the hierarchical regression analysis described above. Does VIEWCAT significantly moderate the effect of AGE on POSTNUMB? Provide statistical justification for your conclusion. Click to show code ## Estimate the additive model a view the results: results_add &lt;- lm(POSTNUMB ~ VIEWCAT + AGE, data = sesam2) summary(results_add) ## ## Call: ## lm(formula = POSTNUMB ~ VIEWCAT + AGE, data = sesam2) ## ## Residuals: ## Min 1Q Median 3Q Max ## -23.680 -8.003 -0.070 8.464 22.635 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -10.1056 6.5091 -1.553 0.12235 ## VIEWCAT2 9.1453 2.7390 3.339 0.00103 ** ## VIEWCAT3 13.8602 2.6294 5.271 3.98e-07 *** ## VIEWCAT4 16.9215 2.6636 6.353 1.79e-09 *** ## AGE 0.5750 0.1221 4.708 5.08e-06 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 10.94 on 174 degrees of freedom ## Multiple R-squared: 0.2995, Adjusted R-squared: 0.2834 ## F-statistic: 18.6 on 4 and 174 DF, p-value: 9.642e-13 ## Estimate the moderated model and view the results: results_mod &lt;- lm(POSTNUMB ~ VIEWCAT * AGE, data = sesam2) summary(results_mod) ## ## Call: ## lm(formula = POSTNUMB ~ VIEWCAT * AGE, data = sesam2) ## ## Residuals: ## Min 1Q Median 3Q Max ## -23.8371 -8.2387 0.6158 8.7988 22.5611 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -18.7211 15.5883 -1.201 0.2314 ## VIEWCAT2 9.9741 20.6227 0.484 0.6293 ## VIEWCAT3 23.5825 19.3591 1.218 0.2248 ## VIEWCAT4 34.3969 19.3600 1.777 0.0774 . ## AGE 0.7466 0.3074 2.429 0.0162 * ## VIEWCAT2:AGE -0.0175 0.4060 -0.043 0.9657 ## VIEWCAT3:AGE -0.1930 0.3782 -0.510 0.6104 ## VIEWCAT4:AGE -0.3416 0.3770 -0.906 0.3663 ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 10.99 on 171 degrees of freedom ## Multiple R-squared: 0.3046, Adjusted R-squared: 0.2762 ## F-statistic: 10.7 on 7 and 171 DF, p-value: 3.79e-11 ## Test for moderation: anova(results_add, results_mod) Click for explanation VIEWCAT does not significantly moderate the effect of AGE on POSTNUMB (\\(F[3, 171] = 0.422\\), \\(p = 0.738\\)). 3.3.3.8 Sketch the analytic path diagrams for the additive and moderated models you estimated in 3.3.3.7 (on paper). Click for explanation Additive Model Moderated Model End of At-Home Exercises These data were simulated from the covariance matrix provided in Laible, D. J., Carlo, G., &amp; Roesch, S. C. (2004). Pathways to self-esteem in late adolescence: The role of parent and peer attachment, empathy, and social behaviours. Journal of adolescence, 27(6), 703-716.↩︎ These data are from the very interesting study: Ball, S., &amp; Bogatz, G. A. (1970). A Summary of the Major Findings in” The First Year of Sesame Street: An Evaluation”.↩︎ "],["in-class-exercises-2.html", "3.4 In-Class Exercises", " 3.4 In-Class Exercises 3.4.1 Setup Data: You will use the following dataset for these exercises. SelfEsteem Outlook Packages: To complete these exercises, you will need to install the packages described below. Package Description rockchalk Probing interactions, Post-hoc analysis of moderated effects semTools Probing interactions, Comparing models, Establishing measurement invariance across groups Use the install.packages() function to install these packages. Click to show code install.packages(c(&quot;rockchalk&quot;, &quot;semTools&quot;), dependencies = TRUE) 3.4.2 Mediation In this practical, we’ll go back to the data from the at-home exercises, SelfEsteem.sav. Recall that these data comprise 143 observations of the following variables. case: Participant ID number ParAtt: Parental Attachment PeerAtt: Peer Attachment Emp: Empathy ProSoc: Prosocial behavior Aggr: Aggression SelfEst: Self-esteem When we last worked with the data, we built a model with one mediator (Emp), creating indirect effects between our predictors ParAtt and PeerAtt, and our outcome variable SelfEst. Below, you will estimate a more complex, multiple-mediator model. 3.4.2.1 Load the data into the object seData using haven::read_sav() Click to show code library(haven) seData &lt;- read_sav(&quot;SelfEsteem.sav&quot;) For this analysis, we are interested in the (indirect) effects of parental and peer attachment on self-esteem. Furthermore, we want to evaluate the mediating roles of empathy and social behavior (i.e., prosocial behavior and aggression). Specifically, we have the following hypotheses. Better peer relationships will promote higher self-esteem via a three-step indirect process. Better peer relationships will increase empathy levels. Higher empathy will increase prosocial behavior and decrease aggressive behavior. More prosocial behaviors and less aggressive behavior will both produce higher self-esteem. Better relationships with parents directly increase self-esteem. To evaluate these hypotheses, we will use lavaan to estimate the following multiple mediator model as a path model. 3.4.2.2 Specify the lavaan model syntax implied by the path diagram shown above. Save the resulting character string as an object in your environment. Click to show code mod0 &lt;- &#39; ## Equation for outcome: SelfEst ~ ProSoc + Aggr + Emp + ParAtt + PeerAtt ## Equations for stage 2 mediators: ProSoc ~ PeerAtt + ParAtt + Emp Aggr ~ PeerAtt + ParAtt + Emp ## Equation for stage 1 mediator: Emp ~ ParAtt + PeerAtt ## Covariances: ProSoc ~~ Aggr ParAtt ~~ PeerAtt &#39; 3.4.2.3 Use the lavaan::sem() function to estimate the model defined in 3.4.2.2. Use the default settings in sem(). Summarize the fitted model. Click to show code library(lavaan) out &lt;- sem(mod0, data = seData) summary(out) ## lavaan 0.6-19 ended normally after 16 iterations ## ## Estimator ML ## Optimization method NLMINB ## Number of model parameters 21 ## ## Number of observations 143 ## ## Model Test User Model: ## ## Test statistic 0.000 ## Degrees of freedom 0 ## ## Parameter Estimates: ## ## Standard errors Standard ## Information Expected ## Information saturated (h1) model Structured ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) ## SelfEst ~ ## ProSoc 0.252 0.096 2.634 0.008 ## Aggr 0.185 0.085 2.172 0.030 ## Emp 0.143 0.098 1.460 0.144 ## ParAtt 0.244 0.078 3.133 0.002 ## PeerAtt 0.051 0.091 0.555 0.579 ## ProSoc ~ ## PeerAtt -0.037 0.080 -0.469 0.639 ## ParAtt 0.193 0.067 2.886 0.004 ## Emp 0.477 0.074 6.411 0.000 ## Aggr ~ ## PeerAtt -0.095 0.090 -1.055 0.291 ## ParAtt -0.034 0.075 -0.454 0.650 ## Emp -0.309 0.084 -3.697 0.000 ## Emp ~ ## ParAtt 0.078 0.075 1.045 0.296 ## PeerAtt 0.306 0.086 3.557 0.000 ## ## Covariances: ## Estimate Std.Err z-value P(&gt;|z|) ## .ProSoc ~~ ## .Aggr -0.086 0.058 -1.476 0.140 ## ParAtt ~~ ## PeerAtt 0.537 0.103 5.215 0.000 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) ## .SelfEst 0.796 0.094 8.456 0.000 ## .ProSoc 0.618 0.073 8.456 0.000 ## .Aggr 0.777 0.092 8.456 0.000 ## .Emp 0.779 0.092 8.456 0.000 ## ParAtt 1.277 0.151 8.456 0.000 ## PeerAtt 0.963 0.114 8.456 0.000 3.4.2.4 Considering the parameter estimates from 3.4.2.3, what can you say about the hypotheses? Click for explanation Notice that all of the hypotheses stated above are explicitly directional. Hence, when evaluating the significance of the structural paths that speak to these hypotheses, we should use one-tailed tests. We cannot ask lavaan to return one-tailed p-values, but we have no need to do so. We can simply divide the two-tailed p-values in half. The significant direct effect of ParAtt on SelfEst (\\(\\beta = 0.244\\), \\(Z = 3.13\\), \\(p = 0.001\\)) and the lack of a significant direct effect of PeerAtt on SelfEst (\\(\\beta = 0.051\\), \\(Z = 0.555\\), \\(p = 0.29\\)) align with our hypotheses. The remaining patterns of individual estimates also seem to conform to the hypotheses (e.g., all of the individual paths comprising the indirect effects of PeerAtt on SelfEst are significant). We cannot make any firm conclusions until we actually estimate and test the indirect effects, though. 3.4.2.5 Modify the model syntax from 3.4.2.2 by adding definitions of the two hypothesized IEs from PeerAtt to SelfEst. Click to show code You can use any labeling scheme that makes sense to you, but I recommend adopting some kind of systematic rule. Here, I will label the individual estimates in terms of the short variable names used in the path diagram above. mod &lt;- &#39; ## Equation for outcome: SelfEst ~ y_m21 * ProSoc + y_m22 * Aggr + Emp + ParAtt + PeerAtt ## Equations for stage 2 mediators: ProSoc ~ m21_x2 * PeerAtt + ParAtt + m21_m1 * Emp Aggr ~ m22_x2 * PeerAtt + ParAtt + m22_m1 * Emp ## Equation for stage 1 mediator: Emp ~ ParAtt + m1_x2 * PeerAtt ## Covariances: ProSoc ~~ Aggr ParAtt ~~ PeerAtt ## Indirect effects: ie_pro := m1_x2 * m21_m1 * y_m21 ie_agg := m1_x2 * m22_m1 * y_m22 &#39; 3.4.2.6 Use lavaan::sem() to estimate the model with the IEs defined. Use the default settings for sem(). Are the hypothesized IEs significant according to the default tests? Click to show code out &lt;- sem(mod, data = seData) summary(out) ## lavaan 0.6-19 ended normally after 16 iterations ## ## Estimator ML ## Optimization method NLMINB ## Number of model parameters 21 ## ## Number of observations 143 ## ## Model Test User Model: ## ## Test statistic 0.000 ## Degrees of freedom 0 ## ## Parameter Estimates: ## ## Standard errors Standard ## Information Expected ## Information saturated (h1) model Structured ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) ## SelfEst ~ ## ProSoc (y_21) 0.252 0.096 2.634 0.008 ## Aggr (y_22) 0.185 0.085 2.172 0.030 ## Emp 0.143 0.098 1.460 0.144 ## ParAtt 0.244 0.078 3.133 0.002 ## PerAtt 0.051 0.091 0.555 0.579 ## ProSoc ~ ## PerAtt (m21_2) -0.037 0.080 -0.469 0.639 ## ParAtt 0.193 0.067 2.886 0.004 ## Emp (m21_1) 0.477 0.074 6.411 0.000 ## Aggr ~ ## PerAtt (m22_2) -0.095 0.090 -1.055 0.291 ## ParAtt -0.034 0.075 -0.454 0.650 ## Emp (m22_1) -0.309 0.084 -3.697 0.000 ## Emp ~ ## ParAtt 0.078 0.075 1.045 0.296 ## PerAtt (m1_2) 0.306 0.086 3.557 0.000 ## ## Covariances: ## Estimate Std.Err z-value P(&gt;|z|) ## .ProSoc ~~ ## .Aggr -0.086 0.058 -1.476 0.140 ## ParAtt ~~ ## PeerAtt 0.537 0.103 5.215 0.000 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) ## .SelfEst 0.796 0.094 8.456 0.000 ## .ProSoc 0.618 0.073 8.456 0.000 ## .Aggr 0.777 0.092 8.456 0.000 ## .Emp 0.779 0.092 8.456 0.000 ## ParAtt 1.277 0.151 8.456 0.000 ## PeerAtt 0.963 0.114 8.456 0.000 ## ## Defined Parameters: ## Estimate Std.Err z-value P(&gt;|z|) ## ie_pro 0.037 0.018 2.010 0.044 ## ie_agg -0.017 0.011 -1.657 0.098 Click for explanation The IE of Peer Attachment on Self Esteem through Empathy and Prosocial Behavior is significant \\((\\hat{\\textit{IE}} = 0.037\\), \\(Z = 2.01\\), \\(p = 0.022)\\), as is the analogous IE through Aggressive Behavior \\((\\hat{\\textit{IE}} = -0.017\\), \\(Z = -1.66\\), \\(p = 0.049)\\). Though, this latter effect is just barely significant at the \\(\\alpha = 0.05\\) level. The tests we used to evaluate the significance of the IEs in 3.4.2.6 are flawed because they assume normal sampling distributions for the IEs. However the IEs are defined as products of multiple, normally distributed, regression slopes. So the IEs themselves cannot be normally distributed (at least in finite samples), and the results of the normal-theory significance tests may be misleading. To get an accurate test of the IEs, we should use bootstrapping to generate an empirical sampling distribution for each IE. In lavaan, we implement bootstrapping by specifying the se = \"bootstrap\" option in the fitting function (i.e., the cfa() or sem() function) and specifying the number of bootstrap samples via the bootstrap option. Workflow Tip To draw reliable conclusions from bootstrapped results, we need many bootstrap samples (i.e., B &gt; 1000), but we must estimate the full model for each of these samples, so the estimation can take a long time. To avoid too much frustration, you should first estimate the model without bootstrapping to make sure everything is specified correctly. Only after you are certain that your code is correct do you want to run the full bootstrapped version. 3.4.2.7 Re-estimate the model from 3.4.2.6 using 1000 bootstrap samples. Other than the se and bootstrap options, use the defaults. Are the hypothesized IEs significant according to the bootstrap-based test statistics? Click to show code ## Set a seed to get replicable bootstrap samples: set.seed(235711) ## Estimate the model with bootstrapping: out_boot &lt;- sem(mod, data = seData, se = &quot;bootstrap&quot;, bootstrap = 1000) ## Summarize the model: summary(out_boot) ## lavaan 0.6-19 ended normally after 16 iterations ## ## Estimator ML ## Optimization method NLMINB ## Number of model parameters 21 ## ## Number of observations 143 ## ## Model Test User Model: ## ## Test statistic 0.000 ## Degrees of freedom 0 ## ## Parameter Estimates: ## ## Standard errors Bootstrap ## Number of requested bootstrap draws 1000 ## Number of successful bootstrap draws 1000 ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) ## SelfEst ~ ## ProSoc (y_21) 0.252 0.100 2.529 0.011 ## Aggr (y_22) 0.185 0.085 2.174 0.030 ## Emp 0.143 0.095 1.507 0.132 ## ParAtt 0.244 0.079 3.089 0.002 ## PerAtt 0.051 0.095 0.530 0.596 ## ProSoc ~ ## PerAtt (m21_2) -0.037 0.082 -0.456 0.648 ## ParAtt 0.193 0.068 2.831 0.005 ## Emp (m21_1) 0.477 0.078 6.092 0.000 ## Aggr ~ ## PerAtt (m22_2) -0.095 0.087 -1.093 0.275 ## ParAtt -0.034 0.076 -0.448 0.654 ## Emp (m22_1) -0.309 0.092 -3.356 0.001 ## Emp ~ ## ParAtt 0.078 0.072 1.092 0.275 ## PerAtt (m1_2) 0.306 0.079 3.896 0.000 ## ## Covariances: ## Estimate Std.Err z-value P(&gt;|z|) ## .ProSoc ~~ ## .Aggr -0.086 0.058 -1.493 0.135 ## ParAtt ~~ ## PeerAtt 0.537 0.128 4.195 0.000 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) ## .SelfEst 0.796 0.082 9.698 0.000 ## .ProSoc 0.618 0.068 9.114 0.000 ## .Aggr 0.777 0.104 7.476 0.000 ## .Emp 0.779 0.090 8.651 0.000 ## ParAtt 1.277 0.197 6.473 0.000 ## PeerAtt 0.963 0.105 9.203 0.000 ## ## Defined Parameters: ## Estimate Std.Err z-value P(&gt;|z|) ## ie_pro 0.037 0.019 1.891 0.059 ## ie_agg -0.017 0.011 -1.638 0.101 Click for explanation As with the normal-theory tests, the hypothesized IE of Peer Attachment on Self Esteem was significant \\((\\hat{\\textit{IE}} = 0.037\\), \\(Z = 1.89\\), \\(p = 0.029)\\), but the IE of Aggressive Behavior has crossed into nonsignificant territory \\((\\hat{\\textit{IE}} = -0.017\\), \\(Z = -1.64\\), \\(p = 0.051)\\). Note: Bootstrapping is a stochastic method, so each run can provide different results. Since the indirect effect of aggressive behavior is so close to the critical value, you may come to a different conclusions vis-á-vis statistical significance if you run this analysis with a different random number seed or a different number of bootstrap samples. When you use the summary() function to summarize the bootstrapped model from 3.4.2.7, the output will probably look pretty much the same as it did in 3.4.2.6, but it’s not. The standard errors and test statistics in the bootstrapped summary are derived from empirical sampling distributions, whereas these values are based on an assumed normal sampling distribution in 3.4.2.6. The standard method of testing IEs with bootstrapping is to compute confidence intervals (CIs) from the empirical sampling distribution of the IEs. In lavaan, we can compute basic (percentile, 95%) CIs by adding the ci = TRUE option to the summary() function. To evaluate our directional hypotheses at an \\(\\alpha = 0.05\\) level, however, we need to compute 90% CIs. We can get more control over the summary statistics (include the CIs) with the parameterEstimates() function. 3.4.2.8 Check the documentation for lavaan::parameterEstimates(). Click to show code ?parameterEstimates 3.4.2.9 Use the parameterEstimates() function to compute bootstrapped CIs for the hypothesized IEs. Compute percentile CIs. Are the IEs significant according to the bootstrapped CIs? Click to show code parameterEstimates(out_boot, ci = TRUE, level = 0.9) Click for explanation When evaluating a directional hypothesis with a CI, we only consider one of the interval’s boundaries. For a hypothesized positive effect, we check only if the lower boundary is greater than zero. For a hypothesized negative effect, we check if the upper boundary is less than zero. As with the previous tests, the IE of Peer Attachment on Self Esteem through Empathy and Prosocial Behavior is significant \\((\\hat{\\textit{IE}} = 0.037\\), \\(95\\% ~ CI = [0.009; \\infty])\\), as is the analogous IE through Aggressive Behavior \\((\\hat{\\textit{IE}} = -0.017\\), \\(95\\% ~ CI = [-\\infty; -0.003])\\). 3.4.2.10 Based on the analyses you’ve conducted here, what do you conclude vis-à-vis the original hypotheses? Click for explanation Both hypothesized indirect effects between Peer Attachment and Self Esteem were supported in that the IE through Empathy and Prosocial Behavior as well as the IE through Empathy and Aggressive Behavior were both significant. The hypothesized direct effect of Parent Attachment on Self Esteem was also born out via a significant direct effect in the model. These results may not tell the whole story, though. We have not tested for indirect effects between Parent Attachment and Self Esteem, and we have not evaluated simpler indirect effects between Peer Attachment and Self Esteem (e.g., PeerAtt \\(\\rightarrow\\) Emp \\(\\rightarrow\\) SelfEst). 3.4.3 Moderation We will first analyze a synthetic version of the Outlook on Life Survey data. The original data were collected in the United States in 2012 to measure, among other things, attitudes about racial issues, opinions of the Federal government, and beliefs about the future. We will work with a synthesized subset of the original data. You can access these synthetic data as outlook.rds. This dataset comprises 2288 observations of the following 13 variables. d1:d3: Three observed indicators of a construct measuring disillusionment with the US Federal government. Higher scores indicate more disillusionment s1:s4: Four observed indicators of a construct measuring the perceived achievability of material success. Higher scores indicate greater perceived achievability progress: A single item assessing perceived progress toward achieving the “American Dream” Higher scores indicate greater perceived progress merit: A single item assessing endorsement of the meritocratic ideal that hard work leads to success. Higher scores indicate stronger endorsement of the meritocratic ideal lib2Con: A single item assessing liberal-to-conservative orientation Lower scores are more liberal, higher scores are more conservative party: A four-level factor indicating self-reported political party affiliation disillusion: A scale score representing disillusionment with the US Federal government Created as the mean of d1:d3 success: A scale score representing the perceived achievability of material success Created as the mean of s1:s4 To satisfy the access and licensing conditions under which the original data are distributed, the data contained in outlook.rds were synthesized from the original variables using the methods described by Volker and Vink (2021). You can access the original data here, and you can access the code used to process the data here. 3.4.3.1 Read in the outlook.rds dataset. Hint: An RDS file is an R object that’s been saved to a file. To read in this type of file, we use readRDS() from base R. Click to show code outlook &lt;- readRDS(&quot;outlook.rds&quot;) 3.4.3.2 Summarize the outlook data to get a sense of their characteristics. Click to show code head(outlook) summary(outlook) ## d1 d2 d3 s1 ## Min. :1.000 Min. :1.000 Min. :1.000 Min. :1.000 ## 1st Qu.:3.000 1st Qu.:2.000 1st Qu.:3.000 1st Qu.:2.000 ## Median :4.000 Median :3.000 Median :4.000 Median :2.000 ## Mean :3.642 Mean :3.218 Mean :3.629 Mean :2.288 ## 3rd Qu.:4.000 3rd Qu.:4.000 3rd Qu.:4.000 3rd Qu.:3.000 ## Max. :5.000 Max. :5.000 Max. :5.000 Max. :4.000 ## s2 s3 s4 progress ## Min. :1.000 Min. :1.000 Min. :1.000 Min. : 1.000 ## 1st Qu.:1.000 1st Qu.:1.000 1st Qu.:2.000 1st Qu.: 5.000 ## Median :2.000 Median :2.000 Median :2.000 Median : 7.000 ## Mean :1.922 Mean :2.012 Mean :2.469 Mean : 6.432 ## 3rd Qu.:2.000 3rd Qu.:3.000 3rd Qu.:3.000 3rd Qu.: 8.000 ## Max. :4.000 Max. :4.000 Max. :4.000 Max. :10.000 ## merit lib2Con party disillusion ## Min. :1.000 Min. :1.000 republican : 332 Min. :1.000 ## 1st Qu.:4.000 1st Qu.:3.000 democrat :1264 1st Qu.:3.000 ## Median :5.000 Median :4.000 independent: 576 Median :3.667 ## Mean :4.826 Mean :3.998 other : 116 Mean :3.497 ## 3rd Qu.:6.000 3rd Qu.:5.000 3rd Qu.:4.000 ## Max. :7.000 Max. :7.000 Max. :5.000 ## success ## Min. :1.000 ## 1st Qu.:1.750 ## Median :2.000 ## Mean :2.173 ## 3rd Qu.:2.500 ## Max. :4.000 str(outlook) ## &#39;data.frame&#39;: 2288 obs. of 13 variables: ## $ d1 : num 4 4 4 5 5 4 5 4 4 4 ... ## $ d2 : num 4 2 4 4 3 5 4 2 4 5 ... ## $ d3 : num 4 4 4 5 4 4 4 3 3 4 ... ## $ s1 : num 3 3 4 2 2 2 2 1 3 3 ... ## $ s2 : num 2 2 2 1 1 2 1 1 2 2 ... ## $ s3 : num 3 2 4 1 2 1 1 1 3 2 ... ## $ s4 : num 3 3 3 1 2 3 3 2 2 2 ... ## $ progress : num 8 4 6 1 6 5 7 6 9 7 ... ## $ merit : num 6 5 5 4 3 4 2 5 5 5 ... ## $ lib2Con : num 5 6 4 1 4 4 4 4 4 5 ... ## $ party : Factor w/ 4 levels &quot;republican&quot;,&quot;democrat&quot;,..: 1 3 3 2 2 2 2 2 4 1 ... ## $ disillusion: num 4 3.33 4 4.67 4 ... ## $ success : num 2.75 2.5 3.25 1.25 1.75 2 1.75 1.25 2.5 2.25 ... We will first use OLS regression to estimate a model encoding the following relations: Belief in the achievability of success, success, predicts perceived progress toward the American Dream, progress, as the focal effect. Disillusionment with the US Federal government, disillusion moderates the success \\(\\rightarrow\\) progress effect. Placement on the liberal-to-conservative continuum, lib2Con is partialed out as a covariate. 3.4.3.3 Draw the conceptual path diagram for the model described above. Click for explanation 3.4.3.4 Write out the regression equation necessary to evaluate the moderation hypothesis described above. Click for explanation \\[ Y_{progress} = \\beta_0 + \\beta_1 W_{lib2Con} + \\beta_2 X_{success} + \\beta_3 Z_{disillusion} + \\beta_4 XZ + \\varepsilon \\] 3.4.3.5 Use lm() to estimate the moderated regression model via OLS regression. Click to show code olsFit &lt;- lm(progress ~ lib2Con + success * disillusion, data = outlook) 3.4.3.6 Summarize the fitted model and interpret the results. Is the moderation hypothesis supported? How does disillusionment level affect the focal effect? Click to show code summary(olsFit) ## ## Call: ## lm(formula = progress ~ lib2Con + success * disillusion, data = outlook) ## ## Residuals: ## Min 1Q Median 3Q Max ## -7.4315 -1.2525 0.1307 1.4369 5.6717 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) 6.81128 0.62073 10.973 &lt; 2e-16 *** ## lib2Con 0.03052 0.03040 1.004 0.3155 ## success 0.42360 0.25853 1.638 0.1015 ## disillusion -0.78002 0.16864 -4.625 3.95e-06 *** ## success:disillusion 0.17429 0.07273 2.396 0.0166 * ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 2.041 on 2283 degrees of freedom ## Multiple R-squared: 0.1385, Adjusted R-squared: 0.137 ## F-statistic: 91.74 on 4 and 2283 DF, p-value: &lt; 2.2e-16 Click for explanation Yes, disillusion significantly moderates the relation between success and progress (\\(\\beta = 0.174\\), \\(t[2283] = 2.396\\), \\(p = 0.017\\)) such that the effect of success on progress increases as levels of disillusion increase, after controlling for lib2Con. The rockchalk package contains some useful routines for probing interactions estimated via lm(). Specifically, the plotslopes() function will estimate and plot simple slopes, and the testSlopes() function tests the simple slopes estimated by plotSlopes(). 3.4.3.7 Probe the interaction. Use the plotSlopes() and testSlopes() functions from the rockchalk package to conduct a simple slopes analysis for the model from 3.4.3.5. Click to show code library(rockchalk) ## Estimate and plot simple slopes: psOut &lt;- plotSlopes(olsFit, plotx = &quot;success&quot;, modx = &quot;disillusion&quot;, modxVals = &quot;std.dev&quot;) ## Test the simple slopes: tsOut &lt;- testSlopes(psOut) ## Values of disillusion OUTSIDE this interval: ## lo hi ## -28.9332857 0.2672244 ## cause the slope of (b1 + b2*disillusion)success to be statistically significant ## View the results: tsOut$hypotests Note: The message printed by testSlopes() gives the boundaries of the Johnson-Neyman Region of Significance (Johnson &amp; Neyman, 1936). Johnson-Neyman analysis is an alternative method of probing interactions that we have not covered in this course. For more information, check out Preacher, et al. (2006). We will now use lavaan to estimate the moderated regression model from above as a path analysis. 3.4.3.8 Define the model syntax for the path analytic version of the model described above. Parameterize the model as in the OLS regression. Use only observed items and scale scores. Click to show code pathMod &lt;- &#39; progress ~ 1 + lib2Con + success + disillusion + success:disillusion &#39; 3.4.3.9 Estimate the path model on the outlook data. Click to show code pathFit &lt;- sem(pathMod, data = outlook) 3.4.3.10 Summarize the fitted path model and interpret the results. Do the results match the OLS regression results? What proportion of the variability in progress is explained by this model? Hint: the function lavInspect() can be used to extract information from models Click to show code summary(pathFit) ## lavaan 0.6-19 ended normally after 1 iteration ## ## Estimator ML ## Optimization method NLMINB ## Number of model parameters 6 ## ## Number of observations 2288 ## ## Model Test User Model: ## ## Test statistic 0.000 ## Degrees of freedom 0 ## ## Parameter Estimates: ## ## Standard errors Standard ## Information Expected ## Information saturated (h1) model Structured ## ## Regressions: ## Estimate Std.Err z-value P(&gt;|z|) ## progress ~ ## lib2Con 0.031 0.030 1.005 0.315 ## success 0.424 0.258 1.640 0.101 ## disillusion -0.780 0.168 -4.630 0.000 ## success:dsllsn 0.174 0.073 2.399 0.016 ## ## Intercepts: ## Estimate Std.Err z-value P(&gt;|z|) ## .progress 6.811 0.620 10.985 0.000 ## ## Variances: ## Estimate Std.Err z-value P(&gt;|z|) ## .progress 4.157 0.123 33.823 0.000 lavInspect(pathFit, &quot;r2&quot;) ## progress ## 0.138 Click for explanation Yes, the estimates and inferential conclusions are all the same as in the OLS regression model. The model explains 13.85% of the variability in progress. The semTools package contains some helpful routines for probing interactions estimated via the lavaan() function (or one of it’s wrappers). Specifically, the probe2WayMC() and plotProbe() functions will estimate/test simple slopes and plot the estimated simple slopes, respectively. 3.4.3.11 Probe the interaction from 3.4.3.9 using semTools utilities. Use probe2WayMC() to estimate and test the simple slopes. Use plotProbe() to visualize the simple slopes. Define the simple slopes with the same conditional values of disillusion that you used in 3.4.3.7. Which simple slopes are significant? Do these results match the results from 3.4.3.7? Click to show code library(semTools) ## Define the conditional values at which to calculate simple slopes: condVals &lt;- summarise(outlook, &quot;m-sd&quot; = mean(disillusion) - sd(disillusion), mean = mean(disillusion), &quot;m+sd&quot; = mean(disillusion) + sd(disillusion) ) |&gt; unlist() ## Compute simple slopes and intercepts: ssOut &lt;- probe2WayMC(pathFit, nameX = c(&quot;success&quot;, &quot;disillusion&quot;, &quot;success:disillusion&quot;), nameY = &quot;progress&quot;, modVar = &quot;disillusion&quot;, valProbe = condVals) ## Check the results: ssOut ## $SimpleIntcept ## disillusion est se z pvalue ## m-sd 2.719 4.690 0.231 20.271 0 ## mean 3.497 4.084 0.190 21.508 0 ## m+sd 4.274 3.477 0.230 15.122 0 ## ## $SimpleSlope ## disillusion est se z pvalue ## m-sd 2.719 0.897 0.083 10.792 0 ## mean 3.497 1.033 0.065 15.994 0 ## m+sd 4.274 1.169 0.088 13.223 0 ## Visualize the simple slopes: plotProbe(ssOut, xlim = range(outlook$success), xlab = &quot;Ease of Personal Success&quot;, ylab = &quot;Progress toward American Dream&quot;, legendArgs = list(legend = names(condVals)) ) Click for explanation Each of the simple slopes is significant. As level of disillusionment increases, the effect of success on progress also increases, and this effect is significant for all levels of disillusion considered here. These results match the simple slopes from the OLS regression analysis. End of In-Class Exercises "],["cfa-i.html", "4 CFA I", " 4 CFA I This week will be a general introduction to latent variables and scaling procedures. We will introduce confirmatory factor analysis (CFA). Homework before the lecture Watch the Lecture Recording for this week. Complete the Reading for this week, and answer the associated reading questions. Homework before the practical Complete the At-Home Exercises. Practical content During the practical you will work on the In-Class Exercises. "],["lecture-3.html", "4.1 Lecture", " 4.1 Lecture Coming soon to a GitBook near you! We’re still working on this page. Somehow, the balance doesn’t feel quite right… "],["reading-3.html", "4.2 Reading", " 4.2 Reading Coming soon to a GitBook near you! We’re still cleaning up this page. It’s almost ready, but we’ve still got some work to do… "],["at-home-exercises-3.html", "4.3 At-Home Exercises", " 4.3 At-Home Exercises Coming soon to a GitBook near you! We’re still building this page. It’s almost finished…just a few more bricks should do it… "],["in-class-exercises-3.html", "4.4 In-Class Exercises", " 4.4 In-Class Exercises Coming soon to a GitBook near you! We’re still writing this page. Almost there…only a few more lines to go… "],["cfa-ii.html", "5 CFA II", " 5 CFA II This week, we will continue with CFA by focussing on the ideas of model fit, model complexity, and model identification. Homework before the lecture Watch the Lecture Recording for this week. Complete the Reading for this week, and answer the associated reading questions. Homework before the practical Complete the At-Home Exercises. Practical content During the practical you will work on the In-Class Exercises. "],["lecture-4.html", "5.1 Lecture", " 5.1 Lecture Coming soon to a GitBook near you! We’re still working on this page. Somehow, the balance doesn’t feel quite right… "],["reading-4.html", "5.2 Reading", " 5.2 Reading Coming soon to a GitBook near you! We’re still cleaning up this page. It’s almost ready, but we’ve still got some work to do… "],["at-home-exercises-4.html", "5.3 At-Home Exercises", " 5.3 At-Home Exercises Coming soon to a GitBook near you! We’re still building this page. It’s almost finished…just a few more bricks should do it… "],["in-class-exercises-4.html", "5.4 In-Class Exercises", " 5.4 In-Class Exercises Coming soon to a GitBook near you! We’re still writing this page. Almost there…only a few more lines to go… "],["fall-break.html", "6 Fall Break", " 6 Fall Break No class this week. We’re currently indisposed, but we’ll be back next week. "],["full-sem.html", "7 Full SEM", " 7 Full SEM This week, we will focus on integrating all of the disparate methods we’ve covered so far into full-fledged structural equation models. Homework before the lecture Watch the Lecture Recording for this week. Complete the Reading for this week, and answer the associated reading questions. Homework before the practical Complete the At-Home Exercises. Practical content During the practical you will work on the In-Class Exercises. "],["lecture-5.html", "7.1 Lecture", " 7.1 Lecture Coming soon to a GitBook near you! We’re still working on this page. Somehow, the balance doesn’t feel quite right… "],["reading-5.html", "7.2 Reading", " 7.2 Reading Coming soon to a GitBook near you! We’re still cleaning up this page. It’s almost ready, but we’ve still got some work to do… "],["at-home-exercises-5.html", "7.3 At-Home Exercises", " 7.3 At-Home Exercises Coming soon to a GitBook near you! We’re still building this page. It’s almost finished…just a few more bricks should do it… "],["in-class-exercises-5.html", "7.4 In-Class Exercises", " 7.4 In-Class Exercises Coming soon to a GitBook near you! We’re still writing this page. Almost there…only a few more lines to go… "],["multiple-group-models.html", "8 Multiple Group Models", " 8 Multiple Group Models This week, you will cover multiple group modeling and measurement invariance testing in the SEM/CFA context. Homework before the lecture Watch the Lecture Recording for this week. Homework before the practical Complete the At-Home Exercises. Practical content During the practical you will work on the In-Class Exercises. "],["lecture-6.html", "8.1 Lecture", " 8.1 Lecture Coming soon to a GitBook near you! We’re still working on this page. Somehow, the balance doesn’t feel quite right… "],["reading-6.html", "8.2 Reading", " 8.2 Reading Coming soon to a GitBook near you! We’re still cleaning up this page. It’s almost ready, but we’ve still got some work to do… "],["at-home-exercises-6.html", "8.3 At-Home Exercises", " 8.3 At-Home Exercises Coming soon to a GitBook near you! We’re still building this page. It’s almost finished…just a few more bricks should do it… "],["in-class-exercises-6.html", "8.4 In-Class Exercises", " 8.4 In-Class Exercises Coming soon to a GitBook near you! We’re still writing this page. Almost there…only a few more lines to go… "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
